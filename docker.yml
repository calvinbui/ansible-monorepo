---

- hosts: homelab

  vars:
    application: docker

  handlers:
    - name: Restart
      ansible.builtin.service:
        name: docker
        state: restarted

    - name: Update grub
      ansible.builtin.command: update-grub
      changed_when: true

  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 86400
      changed_when: false

    # Based on https://docs.docker.com/engine/install/ubuntu/
    - name: Uninstall old versions
      ansible.builtin.apt:
        name:
          - docker.io
          - docker-compose
          - docker-compose-v2
          - docker-doc
          - podman-docker
          - containerd
          - runc
        state: absent

    - name: Install dependencies
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
      register: result
      until: result is success
      retries: 5
      delay: 5

    - name: Add Docker's official GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: "/etc/apt/trusted.gpg.d/{{ application }}"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      register: result
      until: result is success
      retries: 5
      delay: 5

    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/{{ application }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
      register: __apt_repository

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
      when: __apt_repository.changed
      register: result
      until: result is success
      retries: 5
      delay: 5

    - name: Install Docker
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
      register: result
      until: result is success
      retries: 5
      delay: 5

    - name: Install docker-compose
      ansible.builtin.get_url:
        url: "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: "0755"

    - name: Start Docker
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Add user to Docker group
      ansible.builtin.user:
        name: "{{ common_user }}"
        groups: docker
        append: true

    - name: Install docker pip package
      ansible.builtin.apt:
        name: python3-docker

    - name: Create Docker networks
      community.docker.docker_network:
        name: "{{ item.value.name }}"
        driver: "{{ item.value.driver }}"
        ipam_config:
          - gateway: "{{ item.value.subnet | ansible.utils.ipaddr('address') }}"
            subnet: "{{ item.value.subnet | ansible.utils.ipaddr('0') }}"
            iprange: "{{ item.value.iprange.docker }}"
        driver_options:
          parent: "{{ item.value.parent }}.{{ item.value.vlan }}"
      loop: "{{ networks | ansible.builtin.dict2items }}"
      notify: Restart

    - name: Enable swap limit support
      ansible.builtin.lineinfile:
        dest: /etc/default/grub
        state: present
        regex: '^GRUB_CMDLINE_LINUX='
        line: 'GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"'
      notify: Update grub

    # https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file
    - name: Configure daemon
      ansible.builtin.copy:
        content: |
          {
            "dns": ["192.168.1.1"],
            "live-restore": true,
            "ipv6": false,
            "experimental": false
          }
        dest: "/etc/docker/daemon.json"
        owner: "root"
        group: "root"
        mode: "0755"
      notify: Restart

    - name: Prune images daily
      ansible.builtin.cron:
        name: "docker image prune"
        hour: "1"
        minute: "0"
        job: "docker image prune --filter 'label!=skip.prune=true' --all --force > /dev/null 2>&1"
