---
- hosts: homelab
  become: true
  vars:
    firefly_name: firefly
    firefly_app_directory: "{{ common_directory }}/firefly/firefly"
    firefly_app_key: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      66616238363337613032646334663866356262393833386262303533373538393136326463363334
      6438663263653132323766616165393437336635346234350a383461376366363864333564653436
      30346466613538373461623564366338393435376332303332303334363532616230343537636162
      6637366635373636380a613762646634323364316438663163656138303130653834303861373764
      62353837376239333661346665623538383638303766303433396636633534383065643735663330
      6135626462316437356132386534306462616434356438396534
    network: "{{ networks.user }}"
    postgres_name: firefly-postgres
    postgres_version: '12'
    postgres_directory: "{{ common_directory }}/firefly/postgres"
    postgres_environment_variables:
      POSTGRES_USER: fireflyiii
      POSTGRES_PASSWORD: !vault |
        $ANSIBLE_VAULT;1.1;AES256
        66636138626433383439313439353435373036616161646536333333363464383163336361613931
        3361653330393532623865393836336434363162663635330a323366346464326634373038366630
        38323236366237633331306434366464666564376337623930386163323466623538393037333131
        6234393131386537310a346562323563663637393763653961376137613538316638653165363637
        38646136363563656132303534333630343136363536343666663230633466333736
      POSTGRES_DB: fireflyiii
  module_defaults:
    docker_container:
      keep_volumes: false
      state: started
      restart_policy: unless-stopped
      networks_cli_compatible: true
      purge_networks: true
      dns_servers: "{{ network.dns }}"
      networks:
        - name: "{{ network.name }}"
      comparisons:
        env: strict
        labels: strict
  pre_tasks:
    - name: Create Firefly directories
      file:
        path: "{{ item }}"
        state: directory
        recurse: true
        owner: "{{ common_user }}"
        group: "{{ common_root_group }}"
      loop:
        - "{{ firefly_app_directory }}"
  roles:
    - postgres
  tasks:
    - name: Create Firefly container
      docker_container:
        name: "{{ firefly_name }}"
        image: jc5x/firefly-iii
        volumes:
          - "{{ firefly_app_directory }}/export:/var/www/firefly-iii/storage/export"
          - "{{ firefly_app_directory }}/upload:/var/www/firefly-iii/storage/upload"
        env:
          # set same as db credentials and dbname
          APP_KEY: "{{ firefly_app_key }}"
          DB_HOST: "{{ postgres_name }}.{{ network.name }}"
          DB_PORT: "5432"
          DB_DATABASE: "{{ postgres_environment_variables.POSTGRES_DB }}"
          DB_USERNAME: "{{ postgres_environment_variables.POSTGRES_USER }}"
          DB_PASSWORD: "{{ postgres_environment_variables.POSTGRES_PASSWORD }}"
          TZ: "{{ common_timezone }}"
          SEND_TELEMETRY: "false"
          DKR_CHECK_SQLITE: "false"
          TRUSTED_PROXIES: "**"
          LOG_CHANNEL: "docker_out"
        labels:
          traefik.http.routers.firefly.entrypoints: "web"
          traefik.http.routers.firefly.middlewares: "redirect@file"

          traefik.http.routers.firefly-secure.entrypoints: "web-secure"
          traefik.http.routers.firefly-secure.tls: "true"
          traefik.http.routers.firefly-secure.tls.certresolver: letsencrypt

          traefik.http.services.firefly.loadbalancer.server.port: "80"

          com.datadoghq.ad.check_names: '["http_check"]'
          com.datadoghq.ad.init_configs: '[{}]'
          com.datadoghq.ad.instances: '[{"name":"{{ firefly_name }}","url":"https://{{ firefly_name }}.{{ common_tld | string }}"}]'
