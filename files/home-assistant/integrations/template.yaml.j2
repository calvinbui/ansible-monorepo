{%- raw %}
---

# https://www.home-assistant.io/integrations/template/

- sensor:

  #
  # Solar and Electricity Consumption
  #
  -
    # How much electricity the house is consuming
    # solar1 + solar2 - huawei_meter_consumption
    name: "Home Power Consumption"
    unique_id: "home_power_consumption"
    icon: mdi:lightning-bolt
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    state: >
      {% set meter_power = states('sensor.power_meter_active_power') | float %}
      {% set inverter_1_power = states('sensor.inverter_1_active_power') | float %}
      {% set inverter_2_power = states('sensor.inverter_2_active_power') | float %}
      {{ ((inverter_1_power + inverter_2_power) - meter_power )  | float(0) }}
  -
    # How much electricity being imported from the grid
    # The value is negative when drawing from the grid
    # and positive when drawing from solar. So we can assume
    # that any negative value is grid consumption. The value is
    # then inverted so it is more useful in other calculations
    name: "Grid Power Consumption"
    unique_id: "grid_power_consumption"
    icon: mdi:transmission-tower-export
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    state: >
      {% set meter_power = states('sensor.power_meter_active_power') | float %}
      {% if meter_power < 0 %}
      {{ (meter_power * -1) | float(0) }}
      {% else %}
      {{ 0.0 | float(0) }}
      {% endif %}
  -
    # How much solar is being fed back into the grid
    # Similar to above, any positive value is fed back. Any negative
    # value means nothing is being sent because there is no yield
    # or it is being consumed.
    name: "Grid Power Export"
    unique_id: "grid_power_export"
    icon: mdi:transmission-tower-import
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    state: >
      {% set meter_power = states('sensor.power_meter_active_power') | float %}
      {% if meter_power > 0 %}
      {{ meter_power | float(0) }}
      {% else %}
      {{ 0.0 | float(0) }}
      {% endif %}
  -
    # How much raw energy is being generated by both inverters. Add them together.
    name: "Total Solar Generation"
    unique_id: "total_solar_generation"
    icon: mdi:solar-power-variant
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    state: >
      {% set inverter_1_power = states('sensor.inverter_1_active_power') | float %}
      {% set inverter_2_power = states('sensor.inverter_2_active_power') | float %}
      {{ (inverter_1_power + inverter_2_power) | float(0) }}
  -
    # How much solar is being self-consumed by the house
    #
    # Take the total raw solar yield and minus what we are feeding to the grid
    # When we are not feeding in anything, we are consuming it all, such as during sunrise/sunset.
    # The value of this sensor will be equal to the yield --> consume everything
    #
    # Once there is no more solar, the value of this sensor will be 0
    name: "Solar Self Consumption"
    unique_id: "solar_self_consumption"
    icon: mdi:lightning-bolt-circle
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    state: >
      {% set yield = states('sensor.total_solar_generation') | float %}
      {% set export = states('sensor.grid_power_export') | float %}
      {% if yield > export %}
      {{ (yield - export) | float(0) }}
      {% else %}
      {{ 0.0 | float(0) }}
      {% endif %}

  # Create a sensor to know the current time of use pricing by Ausgrid NSW
  #
  # https://www.ausgrid.com.au/Your-energy-use/Meters/Time-of-use-pricing
  # Peak:
  #   - From 2pm to 8pm on working weekdays during 1 November and 31 March (inclusive) – the “summer months”
  #   - From 5pm to 9pm on working weekdays during 1 June to 31 August (inclusive) – the “winter months”
  #
  # Shoulder:
  #   In simple terms, the shoulder period applies from 7am to 10pm every day, except where a peak period applies during that period.
  #
  #   Specifically, it applies:
  #   - from 7am to 10pm on all weekends and public holidays
  #
  #   on working weekdays in the summer months:
  #     - from 7am to 2pm; and from 8pm to 10pm
  #
  #   on working weekdays in the winter months:
  #     - from 7am to 5pm; and from 9pm to 10pm
  #     - on working weekdays in spring and autumn, from 7am to 10pm.
  #
  # Off-peak: All other times, 10pm to 7am
  -
    name: TOU Period
    icon: mdi:clock-time-three-outline
    state: >
      {% set tou_period = 'shoulder' %}

      {% set n_month = now().month %}
      {% set n_hour = now().hour %}

      {% set is_summer = (n_month <= 3 or n_month >= 11) %}
      {% set is_winter = (6 <= n_month <= 8 ) %}

      {% if n_hour >= 22 or n_hour < 7 %}
        {% set tou_period = 'offpeak' %}
      {% elif ((is_summer and (14 <= n_hour < 20)) or (is_winter and (17 <= n_hour < 21))) and (is_state("binary_sensor.workday_sensor", "on")) %}
        {% set tou_period = 'peak' %}
      {% endif %}

      {{tou_period}}

  # Current electricity plan
  -
    # Peak
    name: Electricity Peak Cost
    icon: mdi:currency-usd
    unit_of_measurement: AUD
    state: "0.5442"
  -
    # Offpeak
    name: Electricity Offpeak Cost
    icon: mdi:currency-usd
    unit_of_measurement: AUD
    state: "0.3521"
  -
    # Shoulder
    name: Electricity Shoulder Cost
    icon: mdi:currency-usd
    unit_of_measurement: AUD
    state: "0.3521"
  -
    # Supply
    name: Electricity Supply Cost
    icon: mdi:currency-usd
    unit_of_measurement: AUD
    state: "1.0137"
  -
    # A sensor to calculate the current cost of electricity based on the TOU and price
    name: Electricity Cost
    icon: mdi:currency-usd
    unit_of_measurement: AUD/kWh
    state: >
      {% if is_state('sensor.tou_period', 'peak') %}
        {{ states('sensor.electricity_peak_cost') }}
      {% elif is_state('sensor.tou_period', 'offpeak') %}
        {{ states('sensor.electricity_offpeak_cost') }}
      {% else %}
        {{ states('sensor.electricity_shoulder_cost') }}
      {% endif %}
  -
    # Feed in
    name: Solar Feed In
    icon: mdi:currency-usd
    unit_of_measurement: AUD/kWh
    state: "0.2000"

  # The price of the plan if there was no solar
  # Non-solar plans may be cheaper than Solar plans, which is the case with us
  # We want to compare how much we would've paid if we didn't have Solar
  # This way we can calculate the difference in price/savings to come to a breakeven date
  -
    # Peak
    name: Alternative Electricity Peak Cost
    icon: mdi:currency-usd
    unit_of_measurement: AUD
    state: "0.3465"
  -
    # Offpeak
    name: Alternative Electricity Offpeak Cost
    icon: mdi:currency-usd
    unit_of_measurement: AUD
    state: "0.1397"
  -
    # Shoulder
    name: Alternative Electricity Shoulder Cost
    icon: mdi:currency-usd
    unit_of_measurement: AUD
    state: "0.1727"
  -
    # Supply
    name: Alternative Electricity Supply Cost
    icon: mdi:currency-usd
    unit_of_measurement: AUD
    state: "0.8800"
  -
    # A sensor to calculate the alternative cost of electricity based on the TOU and price
    name: Alternative Electricity Cost
    icon: mdi:currency-usd
    unit_of_measurement: AUD/kWh
    state: >
      {% if is_state('sensor.tou_period', 'peak') %}
        {{ states('sensor.alternative_electricity_peak_cost') }}
      {% elif is_state('sensor.tou_period', 'offpeak') %}
        {{ states('sensor.alternative_electricity_offpeak_cost') }}
      {% else %}
        {{ states('sensor.alternative_electricity_shoulder_cost') }}
      {% endif %}

  # Electricity Usage TODAY
  # Add off-peak, peak and shoulder periods together.
  -
    name: Electricity Usage Today - Solar
    state_class: total_increasing
    unit_of_measurement: kWh
    device_class: energy
    state: >
      {{
        states('sensor.solar_self_consumption_daily_offpeak') | float(0) +
        states('sensor.solar_self_consumption_daily_peak') | float(0) +
        states('sensor.solar_self_consumption_daily_shoulder') | float(0)
      }}

  -
    name: Electricity Usage Today - Grid
    state_class: total_increasing
    unit_of_measurement: kWh
    device_class: energy
    state: >
      {{
        states('sensor.grid_power_import_daily_peak') | float(0) +
        states('sensor.grid_power_import_daily_offpeak') | float(0) +
        states('sensor.grid_power_import_daily_shoulder') | float(0)
      }}

  -
    name: Electricity Usage Today - Total
    state_class: total_increasing
    unit_of_measurement: kWh
    device_class: energy
    state: >
      {{
        states('sensor.electricity_usage_today_solar') | float(0) +
        states('sensor.electricity_usage_today_grid') | float(0)
      }}

  # Electricity Usage YESTERDAY
  # Add off-peak, peak and shoulder periods together.
  -
    name: Electricity Usage Yesterday - Solar
    state_class: total_increasing
    unit_of_measurement: kWh
    device_class: energy
    state: >
      {{
        state_attr('sensor.solar_self_consumption_daily_offpeak', 'last_period') | float(0) +
        state_attr('sensor.solar_self_consumption_daily_peak', 'last_period') | float(0) +
        state_attr('sensor.solar_self_consumption_daily_shoulder', 'last_period') | float(0)
      }}

  -
    name: Electricity Usage Yesterday - Grid
    state_class: total_increasing
    unit_of_measurement: kWh
    device_class: energy
    state: >
      {{
        state_attr('sensor.grid_power_import_daily_peak', 'last_period') | float(0) +
        state_attr('sensor.grid_power_import_daily_offpeak', 'last_period') | float(0) +
        state_attr('sensor.grid_power_import_daily_shoulder', 'last_period') | float(0)
      }}

  -
    name: Electricity Usage Yesterday - Total
    state_class: total_increasing
    unit_of_measurement: kWh
    device_class: energy
    state: >
      {{
        states('sensor.electricity_usage_yesterday_solar') | float(0) +
        states('sensor.electricity_usage_yesterday_grid') | float(0)
      }}

  # Electricity Usage MONTHLY
  # Add off-peak, peak and shoulder periods together.
  -
    name: Electricity Usage Month - Solar
    state_class: total_increasing
    unit_of_measurement: kWh
    device_class: energy
    state: >
      {{
        states('sensor.solar_self_consumption_monthly_offpeak') | float(0) +
        states('sensor.solar_self_consumption_monthly_peak') | float(0) +
        states('sensor.solar_self_consumption_monthly_shoulder') | float(0)
      }}

  -
    name: Electricity Usage Month - Grid
    state_class: total_increasing
    unit_of_measurement: kWh
    device_class: energy
    state: >
      {{
        states('sensor.grid_power_import_monthly_peak') | float(0) +
        states('sensor.grid_power_import_monthly_offpeak') | float(0) +
        states('sensor.grid_power_import_monthly_shoulder') | float(0)
      }}

  -
    name: Electricity Usage Month - Total
    state_class: total_increasing
    unit_of_measurement: kWh
    device_class: energy
    state: >
      {{
        states('sensor.electricity_usage_month_solar') | float(0) +
        states('sensor.electricity_usage_month_grid') | float(0)
      }}


  # Calculate solar yield by adding the how much solar was exported + how much was self-consumed on a day/month basis
  -
    name: Solar Generated - Today
    state_class: total_increasing
    unit_of_measurement: kWh
    device_class: energy
    state: >
      {{
        states('sensor.grid_power_export_daily_anytime') | float(0) +
        states('sensor.electricity_usage_today_solar') | float(0)
      }}
  -
    name: Solar Generated - Yesterday
    state_class: total_increasing
    unit_of_measurement: kWh
    device_class: energy
    state: >
      {{
        state_attr('sensor.grid_power_export_daily_anytime', 'last_period') | float(0) +
        states('sensor.electricity_usage_yesterday_solar') | float(0)
      }}
  -
    name: Solar Generated - Month
    state_class: total_increasing
    unit_of_measurement: kWh
    device_class: energy
    state: >
      {{
        states('sensor.grid_power_export_monthly_anytime') | float(0) +
        states('sensor.electricity_usage_month_solar') | float(0)
      }}


  # Electricity costs DAILY
  # Calculated by multiplying how much was used/generated and multiplying by the price
  -
    name: Electricity Costs Today - Peak
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: "{{ states('sensor.grid_power_import_daily_peak') | float * states('sensor.electricity_peak_cost') | float(0) }}"
  -
    name: Electricity Costs Today - Offpeak
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: "{{ states('sensor.grid_power_import_daily_offpeak') | float * states('sensor.electricity_offpeak_cost') | float(0) }}"
  -
    name: Electricity Costs Today - Shoulder
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: "{{ states('sensor.grid_power_import_daily_shoulder') | float * states('sensor.electricity_shoulder_cost') | float(0) }}"
  -
    name: Electricity Costs Today - Export
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: "{{ states('sensor.grid_power_export_daily_anytime') | float * states('sensor.solar_feed_in') | float(0) }}"
  -
    name: Electricity Costs Today - Import
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: >
      {{
        states('sensor.electricity_supply_cost') | float(0) +
        states('sensor.electricity_costs_today_peak') | float(0) +
        states('sensor.electricity_costs_today_offpeak') | float(0) +
        states('sensor.electricity_costs_today_shoulder') | float(0)
      }}
  -
    name: Electricity Costs Today - Total
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: >
      {{
        states('sensor.electricity_costs_today_import') | float(0) -
        states('sensor.electricity_costs_today_export') | float(0)
      }}

  # Electricity costs YESTERDAY
  # Calculated by multiplying how much was used/generated and multiplying by the price
  -
    name: Electricity Costs Yesterday - Peak
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: "{{ state_attr('sensor.grid_power_import_daily_peak', 'last_period') | float * states('sensor.electricity_peak_cost') | float(0) }}"
  -
    name: Electricity Costs Yesterday - Offpeak
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: "{{ state_attr('sensor.grid_power_import_daily_offpeak', 'last_period') | float * states('sensor.electricity_offpeak_cost') | float(0) }}"
  -
    name: Electricity Costs Yesterday - Shoulder
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: "{{ state_attr('sensor.grid_power_import_daily_shoulder', 'last_period') | float * states('sensor.electricity_shoulder_cost') | float(0) }}"
  -
    name: Electricity Costs Yesterday - Export
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: "{{ state_attr('sensor.grid_power_export_daily_anytime', 'last_period') | float * states('sensor.solar_feed_in') | float(0) }}"
  -
    name: Electricity Costs Yesterday - Import
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: >
      {{
        states('sensor.electricity_supply_cost') | float(0) +
        states('sensor.electricity_costs_yesterday_peak') | float(0) +
        states('sensor.electricity_costs_yesterday_offpeak') | float(0) +
        states('sensor.electricity_costs_yesterday_shoulder') | float(0)
      }}
  -
    name: Electricity Costs Yesterday - Total
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: >
      {{
        states('sensor.electricity_costs_yesterday_import') | float(0) -
        states('sensor.electricity_costs_yesterday_export') | float(0)
      }}

  # Electricity costs MONTHLY
  # Calculated by multiplying how much was used/generated and multiplying by the price
  -
    name: Electricity Costs Month - Peak
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: "{{ states('sensor.grid_power_import_monthly_peak') | float * states('sensor.electricity_peak_cost') | float(0) }}"
  -
    name: Electricity Costs Month - Offpeak
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: "{{ states('sensor.grid_power_import_monthly_offpeak') | float * states('sensor.electricity_offpeak_cost') | float(0) }}"
  -
    name: Electricity Costs Month - Shoulder
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: "{{ states('sensor.grid_power_import_monthly_shoulder') | float * states('sensor.electricity_shoulder_cost') | float(0) }}"
  -
    name: Electricity Costs Month - Export
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: "{{ states('sensor.grid_power_export_monthly_anytime') | float * states('sensor.solar_feed_in') | float(0) }}"

  -
    name: Electricity Costs Month - Supply
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: "{{ (states('sensor.electricity_supply_cost') | float) * (( now() | as_timestamp | int - state_attr('sensor.grid_power_import_monthly_offpeak','last_reset') | as_timestamp | int) / 86400 | int ) }}"
  -
    name: Electricity Costs Month - Import
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: >
      {{
        states('sensor.electricity_costs_month_supply') | float(0) +
        states('sensor.electricity_costs_month_peak') | float(0) +
        states('sensor.electricity_costs_month_offpeak') | float(0) +
        states('sensor.electricity_costs_month_shoulder') | float(0)
      }}
  -
    name: Electricity Costs Month - Total
    device_class: monetary
    state_class: total
    unit_of_measurement: AUD
    state: >
      {{
        states('sensor.electricity_costs_month_import') | float(0) -
        states('sensor.electricity_costs_month_export') | float(0)
      }}

  # How much we are paying for electricity this hour.
  # (daily supply cost / 24) + (current feed-in OR import * rate)
  -
    name: Electricity Costs Currently
    state_class: total
    unit_of_measurement: AUD
    device_class: monetary
    state: >
        {% set hourly = (states('sensor.electricity_supply_cost') | float(0)) / 24 %}
        {% set gridout = states('sensor.grid_power_export') | int %}
        {% set gridin = states('sensor.grid_power_consumption') | int %}
        {% if gridout > 0 %}
          {{ ((gridout/1000) * (states('sensor.solar_feed_in') | float * -1) + hourly) | round(2) }}
        {% else %}
          {{ ((gridin/1000) * states('sensor.electricity_cost') | float + hourly) | round(2) }}
        {% endif %}

  # How much we are paying for electricity per day, updated monthly using the utility meter integration
  # Divides the cost for the month by the amount of days
  -
    name: Electricity Costs Average Per Day
    state_class: total
    unit_of_measurement: AUD
    device_class: monetary
    state: >
      {{ (states('sensor.electricity_costs_month_total') | float / ((now() | as_timestamp - state_attr('sensor.grid_power_import_monthly_offpeak','last_reset') | as_timestamp) / 86400)) | round(2) }}

  # Forecast how much the next bill be based on the daily average
  -
    name: Electricity Costs Bill Forecast
    state_class: total
    unit_of_measurement: AUD
    device_class: monetary
    state: >
      {{ (states('sensor.electricity_costs_average_per_day') | float) * 28 }}

  # How much we would be paying if we were on the non-solar (alternative) plan for yesterday
  -
    name: Electricity Costs Alternative Plan
    state_class: total
    unit_of_measurement: AUD
    device_class: monetary
    state: >
      {{
        (
          (states('sensor.alternative_electricity_offpeak_cost')|float(0)) * (
            (state_attr('sensor.solar_self_consumption_daily_offpeak', 'last_period')|float(0))
            +
            (state_attr('sensor.grid_power_import_daily_offpeak', 'last_period')|float(0))
          )
        )

        +

        (
          (states('sensor.alternative_electricity_peak_cost')|float(0)) * (
            (state_attr('sensor.solar_self_consumption_daily_peak', 'last_period')|float(0))
            +
            (state_attr('sensor.grid_power_import_daily_peak', 'last_period')|float(0))
          )
        )

        +

        (
          (states('sensor.alternative_electricity_shoulder_cost')|float(0)) * (
            (state_attr('sensor.solar_self_consumption_daily_shoulder', 'last_period')|float(0))
            +
            (state_attr('sensor.grid_power_import_daily_shoulder', 'last_period')|float(0))
          )
        )

        +

        (states('sensor.alternative_electricity_supply_cost')|float(0))
      }}

  # Solar Initial Cost
  -
    name: Solar Initial Cost
    unit_of_measurement: AUD
    state: "13010"
    state_class: total
    device_class: monetary

  # Time until solar breakeven
  -
    # solar_days = How many days since installation
    # paid_off = initial cost minus input_number
    # average = paid_off / solar_days
    # remaining_days = input_number / average
    name: Solar Days Until Breakeven
    state: >
      {% set solar_days = (as_timestamp(today_at()) - as_timestamp(states('input_datetime.solar_installation_date'))) / 86400 %}
      {% set paid_off = (states('sensor.solar_initial_cost')|float(0) - (states('input_number.solar_net_cost')|float(0) * -1)) %}
      {% set average = paid_off / solar_days %}
      {% set remaining_days = (states('input_number.solar_net_cost')|float(0) * -1) / average %}
      {{ remaining_days }}
  -
    # today + remaining_days
    name: Solar Breakeven Date
    state: >
      {% set days = states('sensor.solar_days_until_breakeven') | float(0) %}
      {% set nice_remaining_days = today_at() + timedelta(days=days) %}
      {{ nice_remaining_days.strftime('%d %b %Y') }}
{%- endraw %}
