#jinja2: lstrip_blocks: "true", trim_blocks: "false"
# modified from https://github.com/gcormier/megadesk/blob/master/esphome.md
---

# https://esphome.io/components/esphome.html
esphome:
  name: $name
  friendly_name: $friendly_name
  includes:
    - .code_megadesk.h
  comment: ESPHome Device controlling Megadesk controller
  on_boot:
    priority: -100
    then:
      - delay: 1s
      - uart.write: "<C0.0." # reports current position

      {% for i in range(2, 11) %}
      - delay: 1s
      - uart.write: "<R0.{{ i }}." # read eeprom slot {{ i }} - position {{ i }}
      {% endfor %}

      - delay: 1s
      - uart.write: "<R0.11." # read eeprom slot 11 - lowest position
      - delay: 1s
      - uart.write: "<R0.12." # read eeprom slot 12 - highest position

# https://esphome.io/components/sensor/index.html
sensor:
  -
    # these values are set by the .h file
    platform: custom
    lambda: |-
      auto megadesk = new Megadesk(id(uart_desk));
      App.register_component(megadesk);
      return {
        megadesk->raw_height,

        {% for i in range(2, 11) %}
        megadesk->position_{{ i }},
        {% endfor %}

        megadesk->min_height,
        megadesk->max_height,
      };
    sensors:
      -
        name: "Megadesk Raw Height"
        id: megadesk_raw
        internal: true
        on_value:
          then:
            - component.update: megadesk_height_cm
            - component.update: megadesk_height_raw
      {% for i in range(2, 11) %}
      -
        name: "Megadesk Raw Height {{ '%02d' % i }}"
        id: megadesk_raw_{{ i }}
        internal: true
        on_value:
          then:
            - component.update: megadesk_height_cm_{{ i }}
            - component.update: megadesk_height_raw_{{ i }}
      {% endfor %}
      -
        name: "Megadesk Minimum Height"
        internal: true
      -
        name: "Megadesk Maximum Height"
        internal: true

# https://esphome.io/components/number/index.html
# https://esphome.io/components/number/template.html
number:
  -
    platform: template
    name: "Current Height"
    id: megadesk_height_cm
    min_value: 58.54
    max_value: 118.745
    step: 0.53
    mode: slider
    update_interval: never
    unit_of_measurement: 'cm'
    #NewValue = (((OldValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin
    lambda: |-
      return ((((id(megadesk_raw).state - 300) * (119.38 - 58.54)) / (6914 - 300)) + 58.54);
    set_action:
      - number.set:
          id: megadesk_height_raw
          value: !lambda "return int((((x - 58.54) * (6640 - 300)) / (119.38 - 58.54)) + 300);"
  -
    platform: template
    name: "Current Height (raw)"
    id: megadesk_height_raw
    internal: true
    min_value: 300
    max_value: 6640
    step: 1
    update_interval: never
    lambda: |-
      return id(megadesk_raw).state;
    set_action:
      - uart.write: !lambda |-
          char buf[20];
          sprintf(buf, "<=%i,.", int(x));
          std::string s = buf;
          return std::vector<unsigned char>( s.begin(), s.end() );

  {% for i in range(2, 11) %}
  -
    platform: template
    name: "Memory Position Height {{ '%02d' % i }}"
    id: megadesk_height_cm_{{ i }}
    min_value: 58.54
    max_value: 118.745
    step: 0.53
    mode: box
    update_interval: never
    unit_of_measurement: 'cm'
    lambda: |-
      return ((((id(megadesk_raw_{{ i }}).state - 300) * (119.38 - 58.54)) / (6914 - 300)) + 58.54);
    set_action:
      - number.set:
          id: megadesk_height_raw_{{ i }}
          value: !lambda "return int((((x - 58.54) * (6640 - 300)) / (119.38 - 58.54)) + 300);"
  -
    platform: template
    name: "Memory Position Height {{ '%02d' % i }} (raw)"
    id: megadesk_height_raw_{{ i }}
    internal: true
    min_value: 300
    max_value: 6640
    step: 1
    update_interval: never
    lambda: |-
      return id(megadesk_raw_{{ i }}).state;
    set_action:
      - uart.write: !lambda |-
          char buf[20];
          sprintf(buf, "<S%i,{{ i }}.", int(x));
          std::string s = buf;
          return std::vector<unsigned char>( s.begin(), s.end() );
  {% endfor %}

# https://esphome.io/components/button/index.html
# https://esphome.io/components/button/template.html
button:
  {% for button in [
    { "name": "Memory Position 02", "serial": ["<L0,2."] },
    { "name": "Memory Position 03", "serial": ["<L0,3."] },
    { "name": "Memory Position 04", "serial": ["<L0,4."] },
    { "name": "Memory Position 05", "serial": ["<L0,5."] },
    { "name": "Memory Position 06", "serial": ["<L0,6."] },
    { "name": "Memory Position 07", "serial": ["<L0,7."] },
    { "name": "Memory Position 08", "serial": ["<L0,8."] },
    { "name": "Memory Position 09", "serial": ["<L0,9."] },
    { "name": "Memory Position 10", "serial": ["<L0,10."] },
    { "name": "Toggle Minimum Desk Height", "serial": ["<L0,11.", "<R0,11."] },
    { "name": "Toggle Maximum Desk Height", "serial": ["<L0,12.", "<R0,12."] },
    { "name": "Recalibrate Desk", "serial": ["<L0,14."] },
    { "name": "Reboot", "serial": ["<L0,15."] },
    { "name": "Toggle audio-feedback mode", "serial": ["<L0,17."] },
    { "name": "Toggle both-button mode", "serial": ["<L0,18."] },
  ] %}
  -
    platform: template
    name: "{{ button['name'] }}"
    on_press:
      then:
        {% for c in button['serial'] %}
        - uart.write: "{{ c }}"
        {% endfor %}
  {% endfor %}

# https://esphome.io/guides/automations.html#interval-component
interval:
  -
    interval: 300s
    then:
      - uart.write: "<C0.0." # reports current position
