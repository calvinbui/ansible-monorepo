#jinja2: lstrip_blocks: "true", trim_blocks: "false"
# modified from https://github.com/gcormier/megadesk/blob/master/esphome.md
---

# https://esphome.io/components/esphome.html
esphome:
  name: $name
  friendly_name: $friendly_name
  includes:
    - .code_megadesk.h
  comment: ESPHome Device controlling Megadesk controller
  on_boot:
    priority: -100
    then:
      - delay: 1000ms
      - uart.write: "<C0.0." # reports current position

      {% for i in range(2, 11) %}
      - delay: 1000ms
      - uart.write: "<R0.{{ i }}." # read eeprom slot {{ i }} - position {{ i }}
      {% endfor %}

      - delay: 1000ms
      - uart.write: "<R0.11." # read eeprom slot 11 - lowest position
      - delay: 1000ms
      - uart.write: "<R0.12." # read eeprom slot 12 - highest position

# https://esphome.io/components/sensor/index.html
# https://esphome.io/components/sensor/custom.html
sensor:
  -
    # these values are set by the .h file
    platform: custom
    lambda: |-
      auto megadesk = new Megadesk(id(uart_desk));
      App.register_component(megadesk);
      return {
        megadesk->height_raw,
        {% for i in range(2, 11) %}
        megadesk->height_{{ i }},
        {% endfor %}
        megadesk->height_min,
        megadesk->height_max,
      };
    sensors:
      -
        name: "Height (Raw)"
        id: megadesk_raw_height
        internal: false
        on_value:
          then:
            # update height sensors
            - component.update: megadesk_height_cm
            - component.update: megadesk_height_raw
            - component.update: megadesk_height_slider_cm
            - component.update: megadesk_height_from_min_cm

            # update sensors that the table is idle
            - binary_sensor.template.publish:
                id: megadesk_moving
                state: OFF
            - cover.template.publish:
                id: megadesk_controls
                current_operation: IDLE

      {% for i in range(2, 11) %}
      -
        name: "Height (Raw) Memory Position {{ '%02d' % i }}"
        id: megadesk_raw_{{ i }}
        internal: true
        on_value:
          then:
            - component.update: megadesk_height_cm_{{ i }}
            - component.update: megadesk_height_raw_{{ i }}
      {% endfor %}
      -
        name: "Minimum Height (Raw)"
        id: megadesk_raw_min
        internal: false
        on_value:
          then:
            - component.update: megadesk_height_min_cm
      -
        name: "Maximum Height (Raw)"
        id: megadesk_raw_max
        internal: false
        on_value:
          then:
            - component.update: megadesk_height_max_cm
  -
    name: "Current Height"
    id: megadesk_height_cm
    icon: "mdi:human-male-height"
    platform: template
    lambda: |-
      return ((((id(megadesk_raw_height).state - 300) * (119.38 - 58.54)) / (6914 - 300)) + 58.54);
    unit_of_measurement: 'cm'
  -
    name: "Minimum Height"
    id: megadesk_height_min_cm
    icon: "mdi:human-male-height-variant"
    platform: template
    lambda: |-
      return ((((id(megadesk_raw_min).state - 300) * (119.38 - 58.54)) / (6914 - 300)) + 58.54);
    unit_of_measurement: 'cm'
    on_value:
      then:
        - component.update: megadesk_height_from_min_cm
  -
    name: "Maximum Height"
    id: megadesk_height_max_cm
    icon: "mdi:human-male-height-variant"
    platform: template
    lambda: |-
      return ((((id(megadesk_raw_max).state - 300) * (119.38 - 58.54)) / (6914 - 300)) + 58.54);
    unit_of_measurement: 'cm'
  -
    name: "Height from Minimum"
    id: megadesk_height_from_min_cm
    icon: "mdi:stairs-up"
    platform: template
    lambda: |-
      return id(megadesk_height_cm).state - id(megadesk_height_min_cm).state;
    unit_of_measurement: 'cm'

# https://esphome.io/components/binary_sensor/status.html
binary_sensor:
  -
    platform: template
    id: megadesk_moving
    icon: "mdi:motion"
    device_class: moving
    name: "Moving"

# https://esphome.io/components/cover/template.html
cover:
  - platform: template
    id: megadesk_controls
    icon: "mdi:gamepad"
    name: "Controls"
    lambda: |-
      // heaps of spam on boot since these don't have values yet
      if (id(megadesk_raw_height).state > 0 && id(megadesk_raw_min).state > 0 && id(megadesk_raw_max).state > 0) {
        return ( id(megadesk_raw_height).state - id(megadesk_raw_min).state ) / ( id(megadesk_raw_max).state - id(megadesk_raw_min).state );
      }
      return 0.0;
    assumed_state: true
    optimistic: false
    open_action:
      - cover.template.publish:
          id: megadesk_controls
          current_operation: OPENING
      - uart.write: "<+308,0." # i find it raises -8 more than expected
      - binary_sensor.template.publish:
          id: megadesk_moving
          state: ON
    close_action:
      - cover.template.publish:
          id: megadesk_controls
          current_operation: CLOSING
      - uart.write: "<-295,0." # i find it lowers +5 more than expected
      - binary_sensor.template.publish:
          id: megadesk_moving
          state: ON
    stop_action:
      - uart.write: "<+0,0."
    has_position: true
    position_action:
      - cover.template.publish:
          id: megadesk_controls
          current_operation: !lambda |-
            if (pos > id(megadesk_controls).position) {
              return COVER_OPERATION_OPENING;
            } else if (pos < id(megadesk_controls).position) {
              return COVER_OPERATION_CLOSING;
            }
            return COVER_OPERATION_IDLE;
      - uart.write: !lambda |-
          char buf[20];
          sprintf(buf, "<=%i,.", int(pos * id(megadesk_raw_max).state));
          std::string s = buf;
          return std::vector<unsigned char>( s.begin(), s.end() );
      - binary_sensor.template.publish:
          id: megadesk_moving
          state: ON

# https://esphome.io/components/number/index.html
# https://esphome.io/components/number/template.html
number:
  -
    platform: template
    name: "Height Adjustment Slider"
    id: megadesk_height_slider_cm
    icon: "mdi:gamepad"
    min_value: 58.54
    max_value: 118.745
    step: 0.53
    mode: slider
    update_interval: never
    unit_of_measurement: 'cm'
    #NewValue = (((OldValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin
    lambda: |-
      return ((((id(megadesk_raw_height).state - 300) * (119.38 - 58.54)) / (6914 - 300)) + 58.54);
    set_action:
      - number.set:
          id: megadesk_height_raw
          value: !lambda "return int((((x - 58.54) * (6640 - 300)) / (119.38 - 58.54)) + 300);"
  -
    platform: template
    name: "Current Height (raw)"
    id: megadesk_height_raw
    internal: true
    min_value: 300
    max_value: 6640
    step: 1
    update_interval: never
    lambda: |-
      return id(megadesk_raw_height).state;
    set_action:
      - uart.write: !lambda |-
          char buf[20];
          sprintf(buf, "<=%i,.", int(x));
          std::string s = buf;
          return std::vector<unsigned char>( s.begin(), s.end() );

  {% for i in range(2, 11) %}
  -
    platform: template
    name: "Memory Position Height {{ '%02d' % i }}"
    id: megadesk_height_cm_{{ i }}
    icon: "mdi:numeric-{{ i }}"
    min_value: 58.54
    max_value: 118.745
    step: 0.53
    mode: box
    update_interval: never
    unit_of_measurement: 'cm'
    lambda: |-
      return ((((id(megadesk_raw_{{ i }}).state - 300) * (119.38 - 58.54)) / (6914 - 300)) + 58.54);
    set_action:
      - number.set:
          id: megadesk_height_raw_{{ i }}
          value: !lambda "return int((((x - 58.54) * (6640 - 300)) / (119.38 - 58.54)) + 300);"
  -
    platform: template
    name: "Memory Position Height {{ '%02d' % i }} (raw)"
    id: megadesk_height_raw_{{ i }}
    internal: true
    min_value: 300
    max_value: 6640
    step: 1
    update_interval: never
    lambda: |-
      return id(megadesk_raw_{{ i }}).state;
    set_action:
      - uart.write: !lambda |-
          char buf[20];
          sprintf(buf, "<S%i,{{ i }}.", int(x));
          std::string s = buf;
          return std::vector<unsigned char>( s.begin(), s.end() );
  {% endfor %}

# https://esphome.io/components/button/index.html
# https://esphome.io/components/button/template.html
button:
  {% for i in range(2, 11) %}
  -
    platform: template
    name: "Memory Position {{ '%02d' % i }}"
    icon: "mdi:numeric-{{ i }}-circle"
    on_press:
      then:
        - cover.template.publish:
            id: megadesk_controls
            current_operation: !lambda |-
              if (id(megadesk_raw_{{ i }}).state > id(megadesk_raw_height).state) {
                return COVER_OPERATION_OPENING;
              } else if (id(megadesk_raw_{{ i }}).state < id(megadesk_raw_height).state) {
                return COVER_OPERATION_CLOSING;
              }
              return COVER_OPERATION_IDLE;
        - uart.write: "<L0,{{ i }}."
        - binary_sensor.template.publish:
            id: megadesk_moving
            state: ON
  {% endfor %}

  {% for button in [
    { "name": "Toggle Minimum Desk Height", "icon": "toggle-switch", "serial": ["<L0,11.", "<R0,11."] },
    { "name": "Toggle Maximum Desk Height", "icon": "toggle-switch-off", "serial": ["<L0,12.", "<R0,12."] },
    { "name": "Recalibrate Desk", "icon": "crosshairs-gps", "serial": ["<L0,14."] },
    { "name": "Reboot", "icon": "restart", "serial": ["<L0,15."] },
    { "name": "Toggle audio-feedback mode", "icon": "volume-high", "serial": ["<L0,17."] },
    { "name": "Toggle both-button mode", "icon": "radiobox-indeterminate-variant", "serial": ["<L0,18."] },
  ] %}
  -
    platform: template
    name: "{{ button['name'] }}"
    icon: "mdi:{{ button['icon'] }}"
    on_press:
      then:
        {% for c in button['serial'] %}
        - uart.write: "{{ c }}"
        {% endfor %}
  {% endfor %}
