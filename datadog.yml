---
- hosts: datadog
  become: true
  vars:
    network: "{{ networks.mgmt }}"
    datadog_dir: "{{ common_directory }}/datadog"
    datadog_api_key: !vault |
              $ANSIBLE_VAULT;1.1;AES256
              33333135353537653962663836373139633837323337373763663561336233346534396234396533
              6633306166353430623631336430623431633861653262330a383961653039373135396563646530
              65386332353239656232666237303963613766323836306336313963336236353462636266633562
              3364353636373064370a353464626334653963396465383966663333363964653533363064346639
              31646435626133663634653463313462346430656235613838643932323762303036663862313731
              3835613166343664346131656662323562343065356463396532
    mysql_variables:
      - group_vars/piwigo/mariadb.yml
      - group_vars/nextcloud/mariadb.yml
    mongo_variables:
      - group_vars/xbrowsersync/mongo.yaml
  tasks:
    - name: Create Datadog directory
      file:
        path: "{{ datadog_dir }}"
        state: directory

    # MYSQL
    - name: Load MySQL Servers
      include_vars:
        file: "{{ item }}"
        name: "mysql_servers"
      loop: "{{ mysql_variables }}"
      register: mysql_servers
    - name: Combine MySQL vars into one
      set_fact:
        mysql_servers: "{{ dict(mysql_servers.results | json_query('[].[item, ansible_facts.mysql_servers]')) }}"
    # MYSQL

    # MONGO
    - name: Load Mongo Servers
      include_vars:
        file: "{{ item }}"
        name: "mongo_servers"
      loop: "{{ mongo_variables }}"
      register: mongo_servers
    - name: Combine Mongo vars into one
      set_fact:
        mongo_servers: "{{ dict(mongo_servers.results | json_query('[].[item, ansible_facts.mongo_servers]')) }}"
    # MONGO

    - name: Copy Datadog config templates to host
      template:
        src: "{{ item }}"
        dest: "{{ datadog_dir }}/{{ item | basename | regex_replace('\\.j2', '') }}"
        mode: '0644'
      with_fileglob: templates/datadog/*.j2
      notify: Restart Datadog container
    - name: Create Datadog container
      docker_container:
        name: datadog
        image: datadog/agent:latest
        state: started
        trust_image_content: true
        env:
          DD_API_KEY: "{{ datadog_api_key }}"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock:ro
          - /proc/:/host/proc/:ro
          - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
          - /run/systemd/:/host/run/systemd/:ro
          - "{{ datadog_dir }}:/conf.d:ro"
        restart_policy: unless-stopped
        networks_cli_compatible: true
        purge_networks: true
        networks:
          - name: "{{ network.name }}"
        dns_servers: "{{ network.dns }}"
        labels:
          traefik.enable: "false"
  handlers:
    - name: Restart Datadog container
      docker_container:
        name: datadog
        restart: true
