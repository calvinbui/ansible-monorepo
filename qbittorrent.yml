---

- hosts: homelab

  vars:
    application: qbittorrent

    docker_network: "{{ networks.pub }}"

  handlers:
    - name: Restart
      community.docker.docker_container:
        name: "{{ application }}"
        restart: true
        comparisons:
          '*': ignore

  tasks:
    - name: Create config folder
      ansible.builtin.file:
        path: "{{ config_directory }}"
        state: directory
        owner: "{{ common_user }}"
        group: "{{ common_root_group }}"
        mode: "0771"

    - name: Create container
      ansible.builtin.include_role:
        name: docker_container
      vars:
        image: ghcr.io/qbittorrent/docker-qbittorrent-nox:5.1.1-1
        env:
          QBT_LEGAL_NOTICE: "confirm"

          PUID: "{{ common_user_id | string }}"
          PGID: "{{ common_root_group | string }}"

          TZ: "{{ common_timezone }}"
          UMASK: "022"
        volumes:
          - "{{ config_directory }}:/config/qBittorrent"
          - "{{ common_directory_download }}:{{ common_mounted_directory_download }}"
        ipv4_address: "{{ docker_network.prefix }}.252"
        traefik:
          -
            port: 8080
            auth: page
            rule: Host(`{{ application }}.{{ common_tld }}`)
          -
            name: "{{ application }}-bypass-auth"
            port: 8080
            rule: Host(`{{ application }}.{{ common_tld }}`) && Header(`{{ traefik_bypass_auth_header.key }}`, `{{ traefik_bypass_auth_header.value }}`)
        homepage:
          name: qBittorrent
          group: Favourites
          weight: 250
          description: "Download torrents"
          widget:
            username: ""
            password: ""

    - name: Wait for config
      ansible.builtin.wait_for:
        path: "{{ config_directory }}/config/qBittorrent.conf"
      register: _config_file

    - name: Check if config changes required
      community.general.ini_file:
        path: "{{ _config_file.path }}"
        section: "{{ item.key.split('.')[0] }}"
        option: "{{ item.key.split('.')[1] }}"
        value: "{{ item.value }}"
        no_extra_spaces: true
        mode: "0770"
      loop: "{{ qbittorrent_config | dict2items }}"
      check_mode: true
      register: _qbittorrent_config
      vars:
        qbittorrent_config:
          # Downloads
          ## When adding a torrent
          Core.AutoDeleteAddedTorrentFile: "IfAdded" # Delete .torrent files afterwards

          ## Saving Management
          BitTorrent.Session\DisableAutoTMMByDefault: "false" # Default Torrent Management Mode
          BitTorrent.Session\DisableAutoTMMTriggers\DefaultSavePathChanged: "false" # When Default Save Path changed:
          BitTorrent.Session\DisableAutoTMMTriggers\CategorySavePathChanged: "false" # When Category Save Path changed
          BitTorrent.Session\DefaultSavePath: "{{ common_mounted_directory_download }}" # Default Save Path

          # Run external program on torrent completion
          AutoRun.enabled: "true"
          AutoRun.program: chmod -R 770 \"%F/\" # Run external program on torrent finished
          AutoRun.OnTorrentAdded\Enabled: "false"
          AutoRun.OnTorrentAdded\Program: ""

          # Connections
          BitTorrent.Session\BTProtocol: TCP # Peer connection protocol

          ## Listening Port
          BitTorrent.Session\Port: 34727 # Port used for incoming connections

          ## Connection Limits
          BitTorrent.Session\MaxConnections: -1 # Global maximum number of connections
          BitTorrent.Session\MaxConnectionsPerTorrent: -1 # Maximum number of connections per torrent
          BitTorrent.Session\MaxUploads: -1 # Global maximum number of upload slots
          BitTorrent.Session\MaxUploadsPerTorrent: -1 # Maximum number of upload slots per torrent

          # Speed
          ## Global Rate Limits
          BitTorrent.Session\GlobalUPSpeedLimit: 200 # Upload

          ## Alternative Rate Limits
          BitTorrent.Session\AlternativeGlobalUPSpeedLimit: 0 # Upload
          BitTorrent.Session\AlternativeGlobalDLSpeedLimit: 0 # Download

          # BitTorrent
          ## Torrent Queueing
          BitTorrent.Session\MaxActiveDownloads: 20 # Maximum active downloads
          BitTorrent.Session\MaxActiveUploads: 0 # Maximum active uploads
          BitTorrent.Session\MaxActiveTorrents: 20 # Maximum active torrents

          ## Seeding Limits
          BitTorrent.Session\GlobalMaxRatio: -1 # When ratio reaches
          BitTorrent.Session\GlobalMaxSeedingMinutes: 5000 # When total seeding time reaches
          BitTorrent.Session\GlobalMaxInactiveSeedingMinutes: -1 # When inactive seeding time reaches
          Preferences.Bittorrent\MaxRatioAction: 0 # then

          # Web UI
          ## Language
          Preferences.General\Locale: "{{ common_locale | regex_replace('-', '_') }}"

          ## Web User Interface (Remote Control)
          Preferences.WebUI\UseUPnP: "false" # Use UPnP / NAT-PMP to forward the port from my router

          ## Authentication
          Preferences.WebUI\AuthSubnetWhitelist: 0.0.0.0/0 # Bypass authentication for clients in whitelisted IP subnets
          Preferences.WebUI\AuthSubnetWhitelistEnabled: "true" # Bypass authentication for clients in whitelisted IP subnets

          ## Security
          Preferences.WebUI\ClickjackingProtection: "false" # Enable clickjacking protection
          Preferences.WebUI\CSRFProtection: "false" # Enable Cross-Site Request Forgery (CSRF) protection

          # Advanced
          ## qBittorrent Section
          Preferences.Connection\ResolvePeerCountries: "false" # Resolve peer countries

    - name: Stop to make changes
      community.docker.docker_container:
        name: "{{ application }}"
        state: stopped
      when: _qbittorrent_config.changed

    - name: Configure
      community.general.ini_file:
        path: "{{ _config_file.path }}"
        section: "{{ item.key.split('.')[0] }}"
        option: "{{ item.key.split('.')[1] }}"
        value: "{{ item.value }}"
        no_extra_spaces: true
        mode: "0770"
      loop: "{{ _qbittorrent_config.results | selectattr('changed', 'equalto', true) | map(attribute='item') }}"
      when: _qbittorrent_config.changed
      notify: Restart

    - name: Create categories
      ansible.builtin.copy:
        content: |
          {
            "Movies": {
              "save_path": ""
            },
            "MyAnonaMouse": {
              "save_path": ""
            },
            "TV": {
              "save_path": ""
            },
            "TV-Anime": {
              "save_path": ""
            },
            "prowlarr": {
              "save_path": ""
            }
          }
        dest: "{{ config_directory }}/config/categories.json"
        owner: "{{ common_user }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart

    - name: Find search engines to disable
      ansible.builtin.stat:
        path: "{{ config_directory }}/data/nova3/engines/{{ item }}.py"
      loop:
        - eztv
        - jackett
        - limetorrents
        - piratebay
        - solidtorrents
        - torlock
        - torrentproject
        - torrentscsv
      register: _qbittorrent_search_engines

    - name: Disable search engines
      ansible.builtin.command: "mv '{{ item.stat.path }}' '{{ item.stat.path }}.bak'"
      args:
        chdir: "{{ config_directory }}/data/nova3/engines/"
      when: item.stat.exists
      changed_when: true
      loop: "{{ _qbittorrent_search_engines.results }}"
      notify: Restart

    - name: Install Prowlarr search plugin
      block:
        - name: Create plugins folder
          ansible.builtin.file:
            path: "{{ config_directory }}/data/nova3/engines"
            state: directory
            owner: "{{ common_user_id | string }}"
            group: "{{ common_root_group | string }}"
            mode: "0755"

        - name: Download Prowlarr search plugin
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/swannie-eire/prowlarr-qbittorrent-plugin/main/prowlarr.py
            dest: "{{ config_directory }}/data/nova3/engines/"
            mode: "0600"
            owner: "{{ common_user }}"
            group: "{{ common_root_group }}"

        - name: Create Prowlarr search plugin config
          ansible.builtin.copy:
            content: |
              {
                "api_key": "{{ prowlarr_api_key }}",
                "tracker_first": true,
                "url": "http://prowlarr.{{ docker_network.name }}:9696"
              }
            dest: "{{ config_directory }}/data/nova3/engines/prowlarr.json"
            owner: "{{ common_user }}"
            group: "{{ common_root_group }}"
            mode: "0600"
