---

- hosts: homelab

  vars:
    application: crowdsec

    crowdsec_slack_webhook_id: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      34353338653931316530656462346532643132383865306332346130306337346639666439336161
      3066343264633765383337303634643838313935393537660a623866373634386230306539363530
      38636335623132383161386266643638623831633861383233333839313338636162386639336663
      6663376234373534380a383239343636346436653434613635663065666636306364326437623262
      32663532623163626634623738613939346562613338396361393832396132306333

    docker_network: "{{ networks.pub }}"

  handlers:
    - name: Restart
      community.docker.docker_container:
        name: "{{ application }}"
        restart: true
        comparisons:
          '*': ignore

  tasks:
    - name: Create folders
      ansible.builtin.file:
        path: "{{ config_directory }}/{{ item }}"
        state: directory
        owner: "root"
        group: "root"
        mode: "0771"
      loop:
        - config
        - data
        - acquis.d
        - notifications

    - name: Create acquisition datasources
      ansible.builtin.copy:
        content: "{{ item.content }}"
        dest: "{{ config_directory }}/acquis.d/{{ item.name }}.yaml"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart
      loop:
        -
          name: traefik
          content: |
            filenames:
              - /var/log/traefik/access.log
            labels:
              type: traefik
        -
          name: appsec
          content: |
            appsec_config: crowdsecurity/appsec-default
            labels:
                type: appsec
            listen_addr: 0.0.0.0:7422
            source: appsec


    - name: Create email.yaml
      ansible.builtin.copy:
        content: |
          type: email
          name: email

          log_level: info

          {% raw %}
          format: |
            {{ range . -}}
            {{ $alert := . -}}

            {{ range .Decisions -}}
            <p><a href=https://www.shodan.io/host/{{ .Value}}>{{ .Value}}</a> will get <b>{{ .Type}}</b> for next <b>{{ .Duration}}</b> for triggering <b>{{ .Scenario}}</b>.</p>
            {{ end -}}

            <ul>
            {{ range .Events -}}
            {{ range .Meta }}{{ if eq .Key "traefik_router_name"}}<li>{{ .Value}}: {{ end }}{{ end }}{{ range .Meta }}{{ if eq .Key "http_path" }}{{ .Value }}{{ end }}{{ end }}</li>
            {{ end -}}
            </ul>

            {{ end -}}
          {% endraw %}

          smtp_host: {{ common_email_server }}
          smtp_username: {{ common_email_username }}
          smtp_password: {{ common_email_password }}
          smtp_port: {{ common_email_port }}
          sender_email: {{ common_email_username }}
          receiver_emails:
           - {{ application }}{{ common_email_to }}
          encryption_type: starttls
          auth_type: login
          email_subject: CrowdSec Notification

          timeout: 20s
        dest: "{{ config_directory }}/notifications/email.yaml"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart

    - name: Create slack.yaml
      ansible.builtin.copy:
        content: |
          type: slack
          name: slack

          log_level: info

          {% raw %}
          format: |
            {{ range . -}}
            {{ $alert := . -}}

            {{ range .Decisions -}}
            <https://www.shodan.io/host/{{ .Value }}|{{ .Value }}> will get {{ .Type }} for next {{ .Duration }} for triggering {{ .Scenario }} on machine '{{ $alert.MachineID }}'.
            {{ end -}}

            {{ range .Events -}}
            {{ range .Meta }}{{ if eq .Key "traefik_router_name" }}- {{ .Value }}: {{ end }}{{ end }}{{ range .Meta }}{{ if eq .Key "http_path" }}{{ .Value }}{{ end }}{{ end }}
            {{ end -}}

            {{ end -}}
          {% endraw %}

          webhook: ${SLACK_WEBHOOK}
        dest: "{{ config_directory }}/notifications/slack.yaml"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart

    - name: Create profiles.yaml
      ansible.builtin.copy:
        content: |
          name: default_ip_remediation

          debug: false

          filters:
            - Alert.Remediation == true && Alert.GetScope() == "Ip"

          decisions:
            - type: ban
              duration: 8766h

          notifications:
            - email
            - slack

          on_success: break
          on_failure: break
        dest: "{{ config_directory }}/profiles.yaml"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"
      notify: Restart

    - name: Create container
      ansible.builtin.include_role:
        name: docker_container
      vars:
        image: ghcr.io/crowdsecurity/crowdsec:v1.7.0
        env:
          # General
          TZ: "{{ common_timezone }}"

          # There may be other collections installed by default
          # They are used in the s00 stage to parse logs
          # Do not remove them
          COLLECTIONS: |-
            {{
              [
                "crowdsecurity/traefik",
                "crowdsecurity/appsec-virtual-patching",
                "crowdsecurity/appsec-generic-rules",
              ] | ansible.builtin.join(' ')
            }}
          # ofelia will take care of it
          NO_HUB_UPGRADE: "true"

          # LAPI
          USE_WAL: "true"
          CUSTOM_HOSTNAME: "{{ application }}"

          # Custom
          SLACK_WEBHOOK: "https://mattermost.{{ common_tld }}/hooks/{{ crowdsec_slack_webhook_id }}"

          # Bouncers
          BOUNCER_KEY_traefik: "{{ traefik_bouncer_key }}"
        volumes:
          - "{{ config_directory }}/config:/etc/crowdsec"
          - "{{ config_directory }}/data:/var/lib/crowdsec/data"

          - "{{ config_directory }}/profiles.yaml:/etc/crowdsec/profiles.yaml"
          - "{{ config_directory }}/acquis.d:/etc/crowdsec/acquis.d"
          - "{{ config_directory }}/notifications/:/etc/crowdsec/notifications"

          - "{{ common_directory }}/traefik/logs:/var/log/traefik:ro"
        labels:
          - ofelia.enabled=true"
          - ofelia.job-exec.{{ application }}-hub.user=0"
          - ofelia.job-exec.{{ application }}-hub.schedule=@daily"
          - ofelia.job-exec.{{ application }}-hub.command=sh -c \"cscli hub update && cscli hub upgrade\""
          - ofelia.job-exec.{{ application }}-hub.tty=false"
          - ofelia.job-exec.{{ application }}-hub.no-overlap=true"
        metrics:
          - port: 6060
