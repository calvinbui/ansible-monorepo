---

- hosts: octopi

  vars:
    application: octopi

    common_user: pi

    octodash_api_key: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      39323665313038653735633130323237383734633061303236363562333562353565623932343834
      6262303365353765613965663366326639353765316437620a623765633232633830363430623361
      32663061386430343331393130373264626433663735653763376637386634333536313066636630
      3031373933613235390a313132616136366634333866343434666661363963646531316337326162
      36396264316634353961386538646336353530633162303363366263393332383037333263393730
      6237646633613132633033343664376632636462633033633837

  handlers:
    - name: Reboot
      ansible.builtin.reboot:
        reboot_timeout: 360

  tasks:
    - name: Disable requiretty to enable Ansible pipelining
      ansible.builtin.lineinfile:
        dest: /etc/sudoers
        line: "{{ item.line }}"
        state: "{{ item.state }}"
      loop:
        - line: Defaults requiretty
          state: absent
        - line: Defaults !requiretty
          state: present
      vars:
        ansible_ssh_pipelining: false

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 600
      changed_when: false

    - name: Set authorized keys
      ansible.posix.authorized_key:
        user: "{{ item }}"
        state: present
        key: https://github.com/calvinbui.keys
      loop:
        - root
        - "{{ common_user }}"

    - name: No password sudo
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        state: present
        regexp: "^{{ common_user }}"
        line: "{{ common_user }} ALL=(ALL) NOPASSWD: ALL"
        validate: "visudo -cf %s"

    - name: Install apt packages
      ansible.builtin.apt:
        name:
          - neovim
          - htop
          - iftop
          - nano
          - tree
          - unzip
          - ncdu
          - curl
          - wget
          - dnsutils
          - git
          - avrdude
        state: present

    - name: Remove packages
      ansible.builtin.apt:
        name:
          - popularity-contest
          - pastebinit
        state: present

    - name: Set timezone
      community.general.timezone:
        name: "{{ common_timezone }}"

    - name: Remove git sanity check
      ansible.builtin.file:
        path: /root/bin/git
        state: absent

    - name: Disable Wi-Fi and Bluetooth
      ansible.builtin.lineinfile:
        dest: /etc/modprobe.d/blacklist-wifi-bt.conf
        state: present
        regex: "^blacklist {{ item }}$"
        line: "blacklist {{ item }}"
        mode: "0644"
        create: true
      loop:
        # wifi
        - brcmfmac
        - brcmutil
        # bluetooth
        - hci_uart
        - btbcm
        - btintel
        - rfcom
        - btqca
        - btsdio
        - bluetooth
      notify: Reboot

    # hyperpixel installation
    - name: HyperPixel 4 driver installation and configuration
      block:
        - name: Install hyperpixel dependencies
          ansible.builtin.apt:
            name:
              - device-tree-compiler
              - xinput
            state: present

        - name: Clone hyperpixel drivers repo
          ansible.builtin.git:
            repo: https://github.com/pimoroni/hyperpixel4.git
            version: pi4  # update if changing devices
            dest: /root/hyperpixel4
            single_branch: true
            update: true
          notify: Reboot

        - name: Check if hyperpixel drivers are installed and running
          ansible.builtin.service_facts: ~

        - name: Install hyperpixel drivers
          ansible.builtin.command: sudo ./install.sh
          args:
            chdir: /root/hyperpixel4
          notify: Reboot
          register: _hyperpixel_driver_install
          when: "'hyperpixel4-init.service' not in ansible_facts.services"

        - name: Print hyperpixel installation output
          ansible.builtin.debug:
            msg: "{{ _hyperpixel_driver_install.stdout_lines }}"
          notify: Reboot
          when: "'hyperpixel4-init.service' not in ansible_facts.services"

        # https://github.com/pimoroni/hyperpixel4/issues/111#issuecomment-932707716
        - name: Rotate hyperpixel display
          community.general.ini_file:
            path: /boot/config.txt
            section: "{{ item.section }}"
            option: "{{ item.option }}"
            value: "{{ item.value | default(omit) }}"
            state: "{{ item.state | default('present') }}"
            no_extra_spaces: true
            mode: "0755"
          loop:
            - section: pi4
              option: "dtoverlay"
              state: absent
            - section: pi4
              option: "display_lcd_rotate"
              value: "3"

        - name: Fix touchscreen input
          ansible.builtin.lineinfile:
            path: "/usr/share/X11/xorg.conf.d/40-libinput.conf"
            line: '        Option "TransformationMatrix" "0 -1 1 1 0 0 0 0 1"'
            insertafter: Identifier "libinput touchscreen catchall"
            owner: "root"
            group: "root"
            mode: "0644"

    # octodash installation
    - name: OctoDash installation and configuration
      block:
        # https://github.com/UnchartedBull/OctoDash/wiki/Installation#manual-installation
        - name: Install octodash dependencies
          ansible.builtin.apt:
            name:
              - libgtk-3-0
              - libnotify4
              - libnss3
              - libxss1
              - libxtst6
              - xdg-utils
              - libatspi2.0-0
              - libuuid1
              - libappindicator3-1
              - libsecret-1-0
              - gir1.2-gnomekeyring-1.0
              # packages below needed starting octodash on boot
              - xserver-xorg
              - ratpoison
              - x11-xserver-utils
              - xinit
              - libgtk-3-0
              - xdotool

        - name: Install OctoDash
          ansible.builtin.apt:
            deb: "https://github.com/UnchartedBull/OctoDash/releases/download/v{{ octodash_version }}/octodash_{{ octodash_version }}_armv7l.deb"
          vars:
            octodash_version: 2.3.1
          notify: Reboot

        - name: Enable Console Autologin
          ansible.builtin.command: sudo raspi-config nonint do_boot_behaviour B2
          become: true
          become_user: "{{ common_user }}"
          changed_when: false

        - name: Create .xinitrc file
          ansible.builtin.copy:
            content: |
              #!/bin/sh

              xset s off
              xset s noblank
              xset -dpms

              ratpoison&
              octodash
            dest: "/home/{{ common_user }}/.xinitrc"
            mode: "0755"
            owner: "{{ common_user }}"
            group: "{{ common_user }}"

        - name: Make xinit autostart on boot
          ansible.builtin.blockinfile:
            block: |
              if [ -z "$SSH_CLIENT" ] || [ -z "$SSH_TTY" ]; then
                xinit -- -nocursor
              fi
            path: "/home/{{ common_user }}/.bashrc"

        - name: Configure OctoDash
          ansible.builtin.template:
            src: "{{ files_directory }}/octodash/config.json.j2"
            dest: "/home/pi/.config/octodash/config.json"
            owner: "{{ common_user }}"
            group: "{{ common_user }}"
            mode: "0740"
          notify: Reboot
