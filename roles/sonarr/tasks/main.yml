---

- name: Create config folder
  ansible.builtin.file:
    path: "{{ config_directory }}"
    state: directory
    owner: "{{ common_user }}"
    group: "{{ common_root_group }}"
    mode: "0771"

- name: Copy SQL database init script to create log database
  ansible.builtin.copy:
    content: |
      #!/usr/bin/env bash

      set -euo pipefail

      psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        CREATE DATABASE "{{ application }}-log";
        GRANT ALL PRIVILEGES ON DATABASE "{{ application }}-log" TO "$POSTGRES_USER";
      EOSQL
    dest: "{{ config_directory }}/init-log-db.sh"
    mode: "0755"

- name: Create postgres container
  ansible.builtin.import_role:
    name: postgres
  vars:
    postgres_version: 17
    postgres_database: "{{ application }}-main"
    postgres_directory_extra:
      - "{{ config_directory }}/init-log-db.sh:/docker-entrypoint-initdb.d/init-log-db.sh:ro"
    postgres_password: "{{ postgresdb_password }}"

- name: Create container
  ansible.builtin.include_role:
    name: docker_container
  vars:
    image: lscr.io/linuxserver/sonarr:version-4.0.12.2823
    volumes:
      - "{{ config_directory }}/config:/config"
      - "{{ common_directory_storage }}:{{ common_mounted_directory }}"
    env:
      PUID: "{{ common_user_id | string }}"
      PGID: "{{ common_root_group | string }}"
      TZ: "{{ common_timezone }}"
    traefik:
      -
        port: 8989
        auth: page
        rule: Host(`{{ application }}.{{ common_tld }}`)
      -
        name: "{{ application }}-bypass-auth"
        port: 8989
        rule: Host(`{{ application }}.{{ common_tld }}`) && PathPrefix(`/api/`) && Header(`{{ traefik_bypass_auth_header.key }}`, `{{ traefik_bypass_auth_header.value }}`)

    homepage: "{{ homepage_config }}"
    blackbox:
      path: /ping
    healthcheck:
      test: "curl -f http://localhost:8989/ping || exit 1"
      start_period: 5s
      interval: 5s
      retries: 5

- name: Wait for config
  ansible.builtin.wait_for:
    path: "{{ config_directory }}/config/config.xml"

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 600
  changed_when: false

- name: Install lxml
  ansible.builtin.apt:
    name: python3-lxml
    state: present
  register: result
  until: result is success
  retries: 5
  delay: 5

- name: Configure
  community.general.xml:
    path: "{{ config_directory }}/config/config.xml"
    xpath: "/Config/{{ item.key }}"
    value: "{{ item.value | string }}"
    pretty_print: true
  loop: "{{ _sonarr_config | dict2items }}"
  notify: Restart
  vars:
    _sonarr_config:
      ApiKey: "{{ sonarr_api_key }}"
      LaunchBrowser: "False"
      AnalyticsEnabled: "False"
      AuthenticationMethod: "External"
      InstanceName: "{{ application | replace('-', ' ') | title }}"

      # https://wiki.servarr.com/sonarr/postgres-setup
      PostgresHost: "{{ _postgres_hostname }}"
      PostgresPort: "{{ _postgres_port }}"
      PostgresMainDb: "{{ _postgres_database }}"
      PostgresLogDb: "{{ application }}-log"
      PostgresUser: "{{ _postgres_username }}"
      PostgresPassword: "{{ _postgres_password }}"
