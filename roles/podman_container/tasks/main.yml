---

- name: Reset role vars
  ansible.builtin.set_fact:
    combined_labels: {}
    metrics_labels: {}
    traefik_labels: {}
    homepage_labels: {}
    blackbox_labels: {}
    watchtower_labels: {}

- name: Generate network for the container
  ansible.builtin.include_tasks: networking.yml
  when: network is defined

- name: Merge user provided labels into combined_labels
  ansible.builtin.set_fact:
    combined_labels: "{{ labels | ansible.builtin.map('split', '=', 1) | community.general.dict }}"

- name: Generate Prometheus service discovery labels
  ansible.builtin.include_tasks: metrics.yml
  when: metrics is defined
  loop: "{{ metrics }}"
  loop_control:
    loop_var: metric

- name: Merge generated Prometheus and container labels
  ansible.builtin.set_fact:
    combined_labels: "{{ combined_labels | ansible.builtin.combine(metrics_labels, recursive=True) }}"
  when: metrics is defined

- name: Generate Traefik labels for each route
  ansible.builtin.include_tasks: traefik.yml
  when: traefik is defined
  loop: "{{ traefik }}"
  loop_control:
    loop_var: route
  vars:
    route_name: "{{ route.name | ansible.builtin.default(container_name) | ansible.builtin.default(application) }}"

- name: Merge generated Traefik and container labels
  ansible.builtin.set_fact:
    combined_labels: "{{ combined_labels | ansible.builtin.combine(traefik_labels, recursive=True) }}"
  when: traefik is defined

- name: Disable Traefik labels
  ansible.builtin.set_fact:
    combined_labels: "{{ {'traefik.enable': 'false'} | ansible.builtin.combine(combined_labels) }}"
  when: traefik is undefined

- name: Generate homepage-service-discovery
  ansible.builtin.include_tasks: homepage.yml
  when: homepage is defined
  vars:
    app_name: "{{ container_name | ansible.builtin.default(application) }}"

- name: Merge generated Homepage and container labels
  ansible.builtin.set_fact:
    combined_labels: "{{ combined_labels | ansible.builtin.combine(homepage_labels, recursive=True) }}"
  when: homepage is defined

- name: Generate blackbox service discovery labels via Traefik
  ansible.builtin.include_tasks: blackbox.yml
  when:
    - traefik is defined or blackbox is defined
    - blackbox.enable is undefined or blackbox.enable
    - ((route.type is defined and route.type != "udp") or route.type is undefined)
  vars:
    route: "{{ traefik | ansible.builtin.first }}"  # only loop once on the main entrypoint
    route_name: "{{ route.name | ansible.builtin.default(container_name) | ansible.builtin.default(application) }}"

- name: Merge generated Blackbox and container labels
  ansible.builtin.set_fact:
    combined_labels: "{{ combined_labels | ansible.builtin.combine(blackbox_labels, recursive=True) }}"
  when: blackbox_labels is defined

- name: Generate Watchtower labels
  ansible.builtin.include_tasks: watchtower.yml
  when: _postgres_hostname is defined or _valkey_hostname is defined or _mariadb_hostname is defined or _mongo_hostname is defined

- name: Merge generated Watchtower and container labels
  ansible.builtin.set_fact:
    combined_labels: "{{ combined_labels | ansible.builtin.combine(watchtower_labels, recursive=True) }}"
  when:
    - watchtower_labels is defined
    - watchtower_labels | ansible.builtin.length > 0

- name: "Create podman container for {{ container_name | ansible.builtin.default(application) }}"
  containers.podman.podman_container:
    name: "{{ container_name | ansible.builtin.default(application) }}"
    hostname: "{{ container_name | ansible.builtin.default(application) }}"

    image: "{{ image | ansible.builtin.default(omit) }}"
    entrypoint: "{{ entrypoint | ansible.builtin.default(omit) }}"
    command: "{{ command | ansible.builtin.default(omit) }}"

    state: "{{ state | ansible.builtin.default('started') }}"
    restart_policy: "{{ restart_policy | ansible.builtin.default('on-failure:10') }}"
    stop_timeout: "{{ stop_timeout | ansible.builtin.default(120) }}"

    user: "{{ user | ansible.builtin.default(omit) }}"
    group_add: "{{ group_add | ansible.builtin.default(omit) }}"

    env: "{{ env | ansible.builtin.default(omit) }}"
    timezone: "{{ common_timezone | ansible.builtin.default(omit) }}"

    read_only: "{{ read_only | ansible.builtin.default(omit) }}"
    volumes: "{{ volumes | ansible.builtin.default(omit) }}"
    delete_volumes: "{{ delete_volumes | ansible.builtin.default(true) }}"
    tmpfs: "{{ tmpfs | ansible.builtin.default(omit) }}"
    shm_size: "{{ shm_size | ansible.builtin.default(omit) }}"

    network: "{{ container_network_list }}"
    dns: "{{ container_network.subnet | ansible.builtin.default(omit) | ansible.utils.ipaddr('address') }}"
    dns_search: ["{{ common_local_tld }}"]
    exposed_ports: "{{ exposed_ports | ansible.builtin.default(omit) }}"

    security_opt: "{{ security_opt | ansible.builtin.default(omit) }}"
    sysctl: "{{ sysctl | ansible.builtin.default(omit) }}"
    cap_add: "{{ cap_add | ansible.builtin.default(omit) }}"
    cap_drop: "{{ cap_drop | ansible.builtin.default(omit) }}"
    pid_mode: "{{ pid_mode | ansible.builtin.default(omit) }}"
    privileged: "{{ privileged | ansible.builtin.default(omit) }}"
    device: "{{ device | ansible.builtin.default(omit) }}"

    init: "{{ init | ansible.builtin.default(omit) }}"

    no_healthcheck: "{{ no_healthcheck | ansible.builtin.default(omit) }}"
    healthcheck: "{{ healthcheck | ansible.builtin.default(omit) }}"
    healthcheck_failure_action: "{{ healthcheck_failure_action | ansible.builtin.default(omit) }}"
    healthcheck_start_period: "{{ healthcheck_start_period | ansible.builtin.default(omit) }}"
    healthcheck_interval: "{{ healthcheck_interval | ansible.builtin.default(omit) }}"
    healthcheck_timeout: "{{ healthcheck_timeout | ansible.builtin.default(omit) }}"
    healthcheck_retries: "{{ healthcheck_retries | ansible.builtin.default(omit) }}"

    log_options:
      max_size: "1m"

    labels: "{{ combined_labels }}"
