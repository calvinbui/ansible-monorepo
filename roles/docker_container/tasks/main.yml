---

- name: Reset role vars
  ansible.builtin.set_fact:
    combined_labels: {}
    metrics_labels: {}
    traefik_labels: {}
    homepage_labels: {}
    blackbox_labels: {}
    watchtower_labels: {}

# User-provided labels
- name: Merge labels into combined_labels
  ansible.builtin.set_fact:
    combined_labels: "{{ labels }}"

# Prometheus service discovery
- name: Generate Prometheus service discovery labels
  ansible.builtin.include_tasks: metrics.yml
  when: metrics is defined
  loop: "{{ metrics }}"
  loop_control:
    loop_var: metric

- name: Merge generated Prometheus and Docker labels
  ansible.builtin.set_fact:
    combined_labels: "{{ combined_labels | combine(metrics_labels, recursive=True) }}"
  when: metrics is defined

# Traefik labels
- name: Generate Traefik labels for each route
  ansible.builtin.include_tasks: traefik.yml
  when: traefik is defined
  loop: "{{ traefik }}"
  loop_control:
    loop_var: route
  vars:
    route_name: "{{ route.name | default(name) | default(application) }}"

- name: Merge generated Traefik and Docker labels
  ansible.builtin.set_fact:
    combined_labels: "{{ combined_labels | combine(traefik_labels, recursive=True) }}"
  when: traefik is defined

- name: Disable Traefik labels
  ansible.builtin.set_fact:
    combined_labels: "{{ {'traefik.enable': 'false'} | combine(combined_labels) }}"
  when: traefik is undefined

# homepage labels
- name: Generate homepage-service-discovery
  ansible.builtin.include_tasks: homepage.yml
  when: homepage is defined
  vars:
    app_name: "{{ name | default(application) }}"

- name: Merge generated Homepage and Docker labels
  ansible.builtin.set_fact:
    combined_labels: "{{ combined_labels | combine(homepage_labels, recursive=True) }}"
  when: homepage is defined

# Prometheus Blackbox service discovery using Traefik
- name: Generate blackbox service discovery labels via Traefik
  ansible.builtin.include_tasks: blackbox.yml
  when: (traefik is defined or blackbox is defined) and (blackbox.enable is true or blackbox.enable is undefined) and ((route.type is defined and route.type != "udp") or route.type is undefined)
  vars:
    route: "{{ traefik | first }}"  # only loop once on the main entrypoint
    route_name: "{{ route.name | default(name) | default(application) }}"

- name: Merge generated Blackbox and Docker labels
  ansible.builtin.set_fact:
    combined_labels: "{{ combined_labels | combine(blackbox_labels, recursive=True) }}"
  when: blackbox_labels is defined

# Watchtower labels
- name: Generate Watchtower labels
  ansible.builtin.include_tasks: watchtower.yml
  when: _postgres_hostname is defined or _redis_hostname is defined or _mariadb_hostname is defined or _mongo_hostname is defined

- name: Merge generated Watchtower and Docker labels
  ansible.builtin.set_fact:
    combined_labels: "{{ combined_labels | combine(watchtower_labels, recursive=True) }}"
  when: watchtower_labels is defined

# Create container
- name: "Create docker container for {{ name | default(application) }}"
  community.docker.docker_container:
    name: "{{ name | default(application) }}"

    image: "{{ image | default(omit) }}"
    entrypoint: "{{ entrypoint | default(omit) }}"
    command: "{{ command | default(omit) }}"

    state: "{{ state | default('started') }}"
    recreate: "{{ recreate | default(false) }}"
    restart_policy: "{{ restart_policy | default('unless-stopped') }}"
    auto_remove: "{{ auto_remove | default(omit) }}"

    user: "{{ user | default(omit) }}"

    env: "{{ env | default(omit) }}"

    read_only: "{{ read_only | default(omit) }}"
    volumes: "{{ volumes | default(omit) }}"
    keep_volumes: "{{ keep_volumes | default(false) }}"
    tmpfs: "{{ tmpfs | default(omit) }}"
    shm_size: "{{ shm_size | default(omit) }}"

    hostname: "{{ name | default(omit) }}"
    networks: "{{ network }}"
    dns_servers: "{{ docker_network.dns | default(omit) }}"
    dns_search_domains: "{{ docker_network.name }}"
    network_mode: "{{ docker_network.name | default(omit) }}"
    published_ports: "{{ published_ports | default(omit) }}"
    exposed_ports: "{{ exposed_ports | default(omit) }}"
    networks_cli_compatible: "{{ networks_cli_compatible | default(true) }}"

    security_opts: "{{ security_opts | default(omit) }}"
    capabilities: "{{ capabilities | default(omit) }}"
    cap_drop: "{{ cap_drop | default(omit) }}"
    pid_mode: "{{ pid_mode | default(omit) }}"
    privileged: "{{ privileged | default(omit) }}"
    devices: "{{ devices | default(omit) }}"
    device_requests: "{{ device_requests | default(omit) }}"

    container_default_behavior: "{{ container_default_behavior | default('no_defaults') }}"
    command_handling: "{{ command_handling | default('correct') }}"
    init: "{{ init | default(omit) }}"

    healthcheck: "{{ healthcheck | default(omit) }}"

    log_driver: json-file
    log_options:
      max-size: 1MB
      max-file: "1"

    interactive: "{{ interactive | default(omit) }}"
    tty: "{{ tty | default(omit) }}"

    labels: "{{ combined_labels }}"

    comparisons: "{{ {'volumes': 'strict', 'networks': 'strict'} | combine(comparisons | default({})) }}"
