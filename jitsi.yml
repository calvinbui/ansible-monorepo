---
- hosts: homelab
  become: true
  vars:
    jitsi_directory: "{{ common_directory }}/jitsi"
    jitsi_xmpp_domain: "meet.jitsi"
    jitsi_xmpp_server: "xmpp.{{ jitsi_xmpp_domain }}"
    jitsi_users:
      username: "{{ common_user }}"
      password: !vault |
        $ANSIBLE_VAULT;1.1;AES256
        66306562333865333139363932663434663235626334666365373338323137653463336432313064
        3363313239306663383561613362653561316261323832350a323837393234363530393632353361
        39393837613564663931376633316130613231623064306435333436656431356338323762353561
        3261613363353232390a346532633464396666386431663864623738363037643164333561656435
        66623534356134353035663162643862346537363238393765333630656633313632313639653630
        3736353334373661616262616335343838333966666262353763
    network: "{{ networks.pub }}"
  module_defaults:
    docker_container:
      keep_volumes: false
      state: started
      recreate: true
      restart_policy: unless-stopped
      networks_cli_compatible: true
      purge_networks: true
      dns_servers: "{{ network.dns }}"
      networks:
        - name: "{{ network.name }}"
      comparisons:
        env: strict
        labels: strict
  # pre_tasks:
  #   - name: Clean Jitsi directories
  #     file:
  #       path: "{{ jitsi_directory }}"
  #       state: absent
  tasks:
    - name: Create Jitsi directories
      file:
        path: "{{ jitsi_directory }}"
        state: directory
        owner: "{{ common_user }}"
        group: "{{ common_root_group }}"

    - name: Template env file
      template:
        src: templates/jitsi/env.j2
        dest: "{{ jitsi_directory }}/env"

    - name: Create Jitsi Prosody Container
      docker_container:
        name: jitsi-prosody
        hostname: jitsi-prosody
        image: jitsi/prosody
        # volumes:
        #   - "{{ jitsi_directory }}/prosody:/config"
        env_file: "{{ jitsi_directory }}/env"
        networks:
          - name: "{{ network.name }}"
            aliases: "{{ jitsi_xmpp_server }}"
        labels:
          traefik.enable: "false"

    - name: Create Jitsi Web Container
      docker_container:
        name: jitsi-web
        hostname: jitsi-web
        image: jitsi/web
        # volumes:
        #   - "{{ jitsi_directory }}/web:/config"
        #   - "{{ jitsi_directory }}/web/letsencrypt:/etc/letsencrypt"
        #   - "{{ jitsi_directory }}/transcripts:/usr/share/jitsi-meet/transcripts"
        env_file: "{{ jitsi_directory }}/env"
        networks:
          - name: "{{ network.name }}"
            aliases: "{{ jitsi_xmpp_domain }}"
        labels:
          traefik.http.routers.jitsi-web.entrypoints: "web"
          traefik.http.routers.jitsi-web.middlewares: "redirect@file"
          traefik.http.routers.jitsi-web.rule: "Host(`jitsi.{{ common_tld }}`)"

          traefik.http.routers.jitsi-web-secure.entrypoints: "web-secure"
          traefik.http.routers.jitsi-web-secure.tls: "true"
          traefik.http.routers.jitsi-web-secure.tls.certresolver: letsencrypt
          traefik.http.routers.jitsi-web-secure.rule: "Host(`jitsi.{{ common_tld }}`)"

          traefik.http.services.jitsi-web.loadbalancer.server.port: "80"

    - name: Create Jitsi Jicofo Container
      docker_container:
        name: jitsi-jicofo
        hostname: jitsi-jicofo
        image: jitsi/jicofo
        # volumes:
        #   - "{{ jitsi_directory }}/jicofo:/config"
        env_file: "{{ jitsi_directory }}/env"
        labels:
          traefik.enable: "false"

    - name: Create Jitsi JVB Container
      docker_container:
        name: jitsi-jvb
        hostname: jitsi-jvb
        image: jitsi/jvb
        # volumes:
        #   - "{{ jitsi_directory }}/jvb:/config"
        env_file: "{{ jitsi_directory }}/env"
        labels:
          traefik.udp.routers.jvb.entrypoints: "jitsi"
          traefik.udp.routers.jvb.service: "jvb"
          traefik.udp.services.jvb.loadbalancer.server.port: "10000"

  post_tasks:
    - name: Add credentials to Prosody
      shell: docker exec -it jitsi-prosody bash -c "prosodyctl --config /config/prosody.cfg.lua register {{ item.username }} meet.jitsi {{ item.password }}"
      loop: "{{ jitsi_users }}"
