---

- hosts: homelab

  handlers:
    - name: Update grub
      ansible.builtin.command: update-grub

  tasks:
    - name: Disable requiretty to enable Ansible pipelining
      ansible.builtin.lineinfile:
        dest: /etc/sudoers
        line: "{{ item.line }}"
        state: "{{ item.state }}"
      loop:
        - line: Defaults requiretty
          state: absent
        - line: Defaults !requiretty
          state: present
      vars:
        ansible_ssh_pipelining: false

    - name: Set hostname
      ansible.builtin.copy:
        content: "homelab.{{ common_local_tld }}"
        dest: /etc/hostname
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 600
      changed_when: false
      when: ansible_distribution == "Ubuntu"

    - name: Install pip3 and setuptools
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      register: result
      until: result is success
      retries: 5
      delay: 5
      loop:
        - python3-pip
        - python3-setuptools

    - name: Set authorized keys
      ansible.posix.authorized_key:
        user: "{{ item }}"
        state: present
        key: https://github.com/calvinbui.keys
      loop:
        - root
        - "{{ common_user }}"

    - name: Generate an OpenSSH keypair
      community.crypto.openssh_keypair:
        path: /root/.ssh/id_ed25519
        type: ed25519

    - name: Disable motd files
      ansible.builtin.file:
        path: "{{ item }}"
        mode: "-x"
      loop:
        - /etc/update-motd.d/50-motd-news
        - /etc/update-motd.d/10-help-text

    - name: No password sudo
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        state: present
        regexp: "^{{ common_user }}"
        line: "{{ common_user }} ALL=(ALL) NOPASSWD: ALL"
        validate: "visudo -cf %s"

    - name: Install apt packages
      ansible.builtin.apt:
        name:
          - build-essential
          - neovim
          - htop
          - iftop
          - nano
          - tree
          - unzip
          - ncdu
          - curl
          - wget
          - dnsutils
          - git
          - zfsutils-linux
          - jq
          - ripgrep
          - update-notifier-common
          - apache2-utils  # htpasswd
          - sqlite3
          # https://cisofy.com/lynis/controls/AUTH-9262/
          - libpam-passwdqc
          # https://cisofy.com/lynis/controls/PKGS-7370/
          - debsums
          # https://cisofy.com/lynis/controls/PKGS-7394/
          - apt-show-versions
        state: present

    - name: Install snap packages
      community.general.snap:
        name:
          - yq
        state: present

    - name: Remove packages
      ansible.builtin.apt:
        name:
          - popularity-contest
          - pastebinit
        state: absent

    - name: Set timezone
      community.general.timezone:
        name: "{{ common_timezone }}"

    - name: Create common directory
      ansible.builtin.file:
        path: "{{ common_directory }}"
        state: directory
        owner: "{{ common_user }}"
        group: "{{ common_group }}"
        mode: "0771"

    - name: Disable core dumps
      community.general.pam_limits:
        domain: '*'
        limit_type: hard
        limit_item: core
        value: 0

    - name: Configure logins.def
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        state: present
        regexp: "^{{ item.key | upper }}"
        line: "{{ item.key | upper }} {{ item.value }}"
      loop: "{{ items | dict2items }}"
      vars:
        items:
          # https://cisofy.com/lynis/controls/AUTH-9328/
          umask: "027"
          # https://cisofy.com/lynis/controls/AUTH-9286/
          pass_min_days: "1"
          pass_max_days: "90"
          # https://cisofy.com/lynis/controls/AUTH-9230/
          sha_crypt_min_rounds: "5000"
          sha_crypt_max_rounds: "5000"

    # https://cisofy.com/lynis/controls/NETW-3200/
    - name: Disable unused protocols
      block:
        - name: Prevent module from being loaded
          ansible.builtin.copy:
            dest: "/etc/modprobe.d/{{ item }}.conf"
            content: "install {{ item }} /bin/true"
            owner: "{{ common_root_id }}"
            group: "{{ common_root_group }}"
            mode: "0644"
          loop:
            - dccp
            - sctp
            - rds
            - tipc

        - name: Blacklist modules
          ansible.builtin.lineinfile:
            dest: /etc/modprobe.d/blacklist.conf
            state: present
            regex: "^blacklist {{ item }}$"
            line: "blacklist {{ item }}"
          loop:
            - dccp
            - sctp
            - rds
            - tipc

    # https://cisofy.com/lynis/controls/SSH-7408/
    - name: Harden SSH configuration
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config
        state: present
        regex: "^{{ item.key }}"
        line: "{{ item.key }} {{ item.value }}"
      loop: "{{ items | dict2items }}"
      vars:
        items:
          AllowTcpForwarding: "no"
          ClientAliveCountMax: "2"
          Compression: "no"
          LogLevel: "VERBOSE"
          MaxAuthTries: "3"
          MaxSessions: "2"
          TCPKeepAlive: "no"
          AllowAgentForwarding: "no"

    - name: Set root email
      ansible.builtin.copy:
        dest: "/root/.forward"
        content: "homelab{{ common_email_to }}"
        owner: "{{ common_root_id }}"
        group: "{{ common_root_group }}"
        mode: "0644"

    - name: Configure unattended-upgrades
      ansible.builtin.lineinfile:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        state: present
        regex: "^{{ item.key }}"
        line: "{{ item.key }} {{ item.value }};"
        validate: "echo %s && unattended-upgrades --dry-run"
      loop: "{{ items | dict2items }}"
      vars:
        items:
          "Unattended-Upgrade::MinimalSteps": "true"
          # "Unattended-Upgrade::Mail": ""
          # "Unattended-Upgrade::MailReport": "always"
          "Unattended-Upgrade::Remove-Unused-Kernel-Packages": "true"
          "Unattended-Upgrade::Remove-New-Unused-Dependencies": "true"
          "Unattended-Upgrade::Remove-Unused-Dependencies": "true"

    - name: Set GRUB timeout
      ansible.builtin.lineinfile:
        dest: /etc/default/grub
        state: present
        regex: "^GRUB_RECORDFAIL_TIMEOUT="
        line: "GRUB_RECORDFAIL_TIMEOUT=10"
      notify: Update grub
