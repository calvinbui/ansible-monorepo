- hosts: homelab

  become: true

  vars:
    krew_version: v0.4.1
    krew_plugins:
      - ctx
      - ns

    k9s_version: v0.24.7
    k9s_dir: /usr/local/bin
    k9s_options:
      logoless: "true"

  pre_tasks:
    - name: Update apt cache
      apt:
        update_cache: true
        cache_valid_time: 600
      changed_when: false
      when: ansible_distribution

  tasks:
    ### KUBECTL
    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - gnupg2
          - curl
        state: present
      tags:
        - kubectl

    - name: Add apt key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
      tags:
        - kubectl

    - name: Add repository into sources list
      apt_repository:
        repo: "deb http://apt.kubernetes.io/ kubernetes-xenial main"
        state: present
        update_cache: true
      tags:
        - kubectl

    - name: Install kubectl
      apt:
        name: kubectl
        state: present
      tags:
        - kubectl

    ### KREW
    - name: Check if krew installed
      stat:
        path: "/home/{{ common_user }}/.krew"
      register: __krew_installed
      tags:
        - krew

    - name: Get current krew version
      command: "./kubectl-krew version"
      args:
        chdir: "/home/{{ common_user }}/.krew/bin/"
        warn: false
      become_user: "{{ common_user }}"
      changed_when: false
      register: __krew_version_output
      when: __krew_installed.stat.exists
      tags:
        - krew

    - when:
        ( not __krew_installed.stat.exists ) or
        ( __krew_version_output.stdout_lines[1].split(" ")[-1] != krew_version )
      tags:
        - krew
      block:
        - name: Get krew checksum
          uri:
            url: "https://github.com/kubernetes-sigs/krew/releases/download/{{ krew_version }}/krew.tar.gz.sha256"
            return_content: true
          register: __krew_checksum
          tags:
            - krew

        - name: Download krew
          get_url:
            url: "https://github.com/kubernetes-sigs/krew/releases/download/{{ krew_version }}/krew.tar.gz"
            dest: "/tmp/krew.tar.gz"
            checksum: "sha256:{{ __krew_checksum.content }}"
          tags:
            - krew

        - name: Unpack krew
          unarchive:
            src: /tmp/krew.tar.gz
            dest: /tmp/
            remote_src: true
            extra_opts:
              - "./krew-{{ ansible_system | lower }}_{{ go_arch }}"  # only extract the binary
          tags:
            - krew

        - name: Install krew
          command: "/tmp/krew-{{ ansible_system | lower }}_{{ go_arch }} install krew"
          become_user: "{{ common_user }}"
          args:
            creates: "/home/{{ common_user }}/.krew"
          tags:
            - krew

        - name: Add krew to zshrc
          copy:
            dest: "/home/{{ common_user }}/.oh-my-zsh/custom/krew.zsh"
            content: export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
            owner: "{{ common_user }}"
            group: "{{ common_group }}"
            mode: "770"
          tags:
            - krew

    - name: Install krew plugin
      command: "./kubectl-krew install {{ item }}"
      args:
        chdir: "/home/{{ common_user }}/.krew/bin/"
        warn: false
      become_user: "{{ common_user }}"
      changed_when: false
      loop: "{{ krew_plugins }}"
      tags:
        - krew
        - krew_plugins

    ### K9S
    - name: Check if k9s installed
      stat:
        path: "{{ k9s_dir }}/k9s"
      register: __k9s_installed
      tags:
        - k9s

    - name: Get current k9s version
      command: "{{ k9s_dir }}/k9s version --short"
      args:
        warn: false
      changed_when: false
      register: __k9s_version_output
      when: __k9s_installed.stat.exists
      tags:
        - k9s

    - when:
        ( not __k9s_installed.stat.exists ) or
        ( __k9s_version_output.stdout_lines[0].split(" ")[-1] != k9s_version )
      tags:
        - k9s
      block:
        - name: Get k9s checksum list
          set_fact:
            __k9s_checksums: "{{ lookup('url', 'https://github.com/derailed/k9s/releases/download/' + k9s_version + '/checksums.txt', wantlist=True) | list }}"
          run_once: true

        - name: Get k9s checksum for {{ ansible_architecture }} architecture
          set_fact:
            __k9s_checksum: "{{ item.split(' ')[0] }}"
          with_items: "{{ __k9s_checksums }}"
          when:
            - "( ansible_system + '_' + ansible_architecture + '.tar.gz') in item"

        - name: Download k9s
          get_url:
            url: "https://github.com/derailed/k9s/releases/download/{{ k9s_version }}/k9s_{{ ansible_system }}_{{ ansible_architecture }}.tar.gz"
            dest: /tmp/k9s_{{ ansible_system }}_{{ ansible_architecture }}.tar.gz
            checksum: "sha256:{{ __k9s_checksum }}"

        - name: Install k9s
          unarchive:
            src: /tmp/k9s_{{ ansible_system }}_{{ ansible_architecture }}.tar.gz
            dest: "{{ k9s_dir }}"
            remote_src: true
            extra_opts:
              - k9s  # only extract the binary

    - name: Run k9s to generate config
      command: "timeout 5 {{ k9s_dir }}/k9s"
      args:
        creates: "/home/{{ common_user }}/.k9s/config.yml"
      become_user: "{{ common_user }}"
      register: __k9s_generate_config
      ignore_errors: true
      changed_when: false
      tags:
        - k9s
        - k9s_config

    - name: Configure k9s
      lineinfile:
        path: "/home/{{ common_user }}/.k9s/config.yml"
        regexp: '(\s+){{ item.key }}:'
        line: '\g<1>{{ item.key }}: {{ item.value }}'
        backrefs: true
      with_items: "{{ k9s_options | dict2items }}"
      tags:
        - k9s
        - k9s_config
