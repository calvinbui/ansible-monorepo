---

- hosts: homelab

  vars:
    application: nextcloud

    docker_network: "{{ networks.pub }}"

  tasks:
    - name: Create config folder
      ansible.builtin.file:
        path: "{{ config_directory }}"
        state: directory
        owner: "{{ common_user }}"
        group: "{{ common_group }}"
        mode: "0771"

    - name: Create postgres container
      ansible.builtin.import_role:
        name: postgres
      vars:
        postgres_version: 15
        postgres_password: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          34393861343432623031643033656336643264646638626632633335393862643965303332643463
          3839396236373233633036643730646366373536346130360a656461663033396130623435616135
          37613265663936396433306166373039333530623863326135656236323661396537386265333038
          6539663361336635310a333437613932363937383838366162623031323265396232396235666336
          65373662303434363834656234626237336438663531383232313034356234396462

    - name: Create redis container
      ansible.builtin.include_role:
        name: redis
      vars:
        redis_version: 7
        redis_password: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          35383639333265303734343930383630303464313430353465306531363339646264663934346564
          3937383165666563386238313663653931323839633266660a633032323964613734356462306434
          36636530383134373035316266616432383330653830373237646233633865333133363964656662
          3231366665366137380a323932633634396132376331363030613835616435626332303732303731
          39396138663536663432663664386264386333623437616237643630663831353533

    - name: Create container
      ansible.builtin.include_role:
        name: docker_container
      vars:
        image: nextcloud:27.1.1
        volumes:
          - "{{ config_directory }}/nextcloud:/var/www/html"
        env:
          POSTGRES_DB: "{{ _postgres_database }}"
          POSTGRES_USER: "{{ _postgres_username }}"
          POSTGRES_PASSWORD: "{{ _postgres_password }}"
          POSTGRES_HOST: "{{ _postgres_hostname }}"

          NEXTCLOUD_ADMIN_USER: "{{ common_user }}"
          NEXTCLOUD_ADMIN_PASSWORD: !vault |
            $ANSIBLE_VAULT;1.1;AES256
            34373162656662326631363762383431623164666236666434306665316263303035316336303163
            6665626235353661313363633732383734343237356165640a333966663962356561346362366635
            32393133663937386338343839346662623631306333653833356634393833326465613932353931
            3138613230353462620a383130653733326661386336393737643233396464353061386431316264
            64663865643961313431333430373362353366323836386238623831646139356537

          # these values need to be updated manually afterwards in config.php
          NEXTCLOUD_TRUSTED_DOMAINS: "{{ application }} {{ application }}.{{ docker_network.name }} {{ application }}.{{ common_local_tld }} {{ application }}.{{ common_tld }}"
          TRUSTED_PROXIES: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] | string }}"
          OVERWRITEPROTOCOL: "https"

          REDIS_HOST: "{{ _redis_hostname }}"
          REDIS_HOST_PORT: "{{ _redis_port | string }}"
          REDIS_HOST_PASSWORD: "{{ _redis_password }}"

          SMTP_NAME: "{{ common_email_username }}"
          SMTP_PASSWORD: "{{ common_email_password }}"
          SMTP_PORT: "{{ common_email_port | string }}"
          SMTP_HOST: "{{ common_email_server }}"
          SMTP_SECURE: "tls"

          PHP_MEMORY_LIMIT: "10000M"
          PHP_UPLOAD_LIMIT: "10000M"
          APACHE_BODY_LIMIT: "0"
        traefik:
          - port: 80
            middlewares:
              - "{{ application }}-dav"
        homepage:
          name: Nextcloud
          group: Favourites
          weight: 100
          description: "Productivity platform"
          widget:
            username: !vault |
              $ANSIBLE_VAULT;1.1;AES256
              37326331633339343636663939663063346364616133366566343363356130656238336661656434
              3063613231636130343066303438356639333565316530350a633565363836653264303735626334
              30653637346238623934386635353430303131666536396262393137316462663930613565373939
              3064646266383139390a613438326265373062333961326266643534326436616231653363376536
              6366
            password: !vault |
              $ANSIBLE_VAULT;1.1;AES256
              31313034323664653366313533393437656236303163616239623137343364316130306630313564
              3039633230373231333039613838373330303635656638360a636530313139346537653032343932
              39306563666533333931646532336466333531356238663231386665353237333939336637653135
              6130613464383439360a613537313031396335623433363436326639623863353463616662643930
              35363963393037623362353633333536383363613065666130663236643134316234
            fields: '["numshares"]'
        blackbox:
          path: /status.php
        labels:
          # 33 is www-data
          '{
            "traefik.http.middlewares.{{ application }}-dav.redirectregex.permanent": "true",
            "traefik.http.middlewares.{{ application }}-dav.redirectregex.regex": "https://(.*)/.well-known/(card|cal)dav",
            "traefik.http.middlewares.{{ application }}-dav.redirectregex.replacement": "https://${1}/remote.php/dav/",

            "chadburn.enabled": "true",
            "chadburn.job-exec.{{ application }}-cron.user": "33",
            "chadburn.job-exec.{{ application }}-cron.schedule": "@every 5m",
            "chadburn.job-exec.{{ application }}-cron.command": "/usr/local/bin/php -f cron.php",
            "chadburn.job-exec.{{ application }}-cron.tty": "false",
            "chadburn.job-exec.{{ application }}-cron.no-overlap": "true"
          }'

    - name: Create imaginary container
      ansible.builtin.include_role:
        name: docker_container
      vars:
        name: "{{ application }}-imaginary"
        image: h2non/imaginary:1.2.4
        command: -enable-url-source

    - name: Add imaginary url to config
      community.docker.docker_container_exec:
        container: "{{ application }}"
        user: www-data
        command: "php occ config:system:set preview_imaginary_url --value=http://{{ application }}-imaginary.{{ docker_network.name }}:9000"
      register: _command_result
      failed_when: "'set to string' not in _command_result.stdout"
      changed_when: false
      until: _command_result is success
      retries: 3
      delay: 2

    - name: Enable preview providers
      community.docker.docker_container_exec:
        container: "{{ application }}"
        user: www-data
        command: "php occ config:system:set enabledPreviewProviders {{ ansible_loop.index0 }} --value={{ item }}"
      register: _command_result
      failed_when: "'set to string' not in _command_result.stdout"
      changed_when: false
      until: _command_result is success
      retries: 3
      delay: 2
      loop_control:
        extended: true
      loop:
        - 'OC\\Preview\\Imaginary'
