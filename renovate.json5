{
  $schema: 'https://docs.renovatebot.com/renovate-schema.json',

  branchConcurrentLimit: 0,
  prConcurrentLimit: 0,
  prHourlyLimit: 0,

  rebaseWhen: 'conflicted',

  dependencyDashboard: true,

  ansible: {
    managerFilePatterns: ['/^.*\\.ya?ml$/'],
  },

  timezone: 'Australia/Sydney',

  reviewers: ['calvinbui'],

  commitMessagePrefix: '{{depName}}:',
  commitMessageAction: 'update',
  commitMessageTopic: 'version',

  /*
    Renovate will evaluate all packageRules and not stop once it gets a first match
    You should order your packageRules in order of importance so that later rules can override settings from earlier rules if needed.
  */
  packageRules: [
    {
      matchCategories: ['python'],
      enabled: false,
    },
    /* Ignore latest and localhost tags */
    {
      matchDatasources: ['docker'],
      matchCurrentVersion: '/localhost|latest/',
      enabled: false,
    },
    /*
      override Docker datasource defaults
      https://docs.renovatebot.com/modules/datasource/#docker-datasource
    */
    {
      matchDatasources: ['docker'],
      commitMessageTopic: 'version',
      digest: {
        commitMessageTopic: 'digest',
        group: {
          commitMessageTopic: 'digest',
        },
      },
      pin: {
        group: {
          commitMessageTopic: 'version',
        },
      },
      group: {
        commitMessageTopic: 'version',
      },
    },
    /* plex */
    {
      matchPackageNames: ['/.*\\/pms-docker$/'],
      versioning: 'loose',
      changelogUrl: 'https://forums.plex.tv/t/plex-media-server/30447',
    },
    /* umami */
    {
      matchPackageNames: ['/.*\\/umami$/'],
      versionCompatibility: '^(?<compatibility>.*)-(?<version>.*)$',
      versioning: 'semver',
      sourceUrl: 'https://github.com/umami-software/umami',
      changelogUrl: 'https://github.com/umami-software/umami/releases',
    },
    /* minio */
    {
      matchPackageNames: ['/.*\\/minio$/'],
      versioning: 'regex:^RELEASE\\.(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)T(?<build>.*)Z$',
      sourceUrl: 'https://github.com/minio/minio',
    },
    /* bazarr */
    {
      matchPackageNames: ['/.*\\/bazarr$/'],
      sourceUrl: 'https://github.com/morpheus65535/bazarr',
    },
    /* prometheus */
    {
      matchPackageNames: ['/.*\\/prometheus$/'],
      sourceUrl: 'https://github.com/prometheus/prometheus',
    },
    /* prowlarr */
    {
      matchPackageNames: ['/.*\\/prowlarr$/'],
      changelogUrl: 'https://github.com/Prowlarr/Prowlarr/releases',
    },
    /* renovate */
    {
      matchPackageNames: ['/.*\\/renovate$/'],
      sourceUrl: 'https://github.com/renovatebot/renovate',
    },
    /* authelia */
    {
      matchPackageNames: ['/.*\\/authelia$/'],
      sourceUrl: 'https://github.com/authelia/authelia',
    },
    /* qbittorrent */
    {
      matchPackageNames: ['/.*\\/qbittorrent$/'],
      sourceUrl: 'https://github.com/qbittorrent/qBittorrent',
      changelogUrl: 'https://github.com/qbittorrent/qBittorrent/blob/v{{newMajor}}_{{newMinor}}_x/Changelog',
    },
    /* portainer */
    {
      matchPackageNames: ['/.*\\/portainer-[c|e]e$/'],
      sourceUrl: 'https://github.com/portainer/portainer',
    },
    /* outline */
    {
      matchPackageNames: ['/outlinewiki\\/outline$/'],
      sourceUrl: 'https://github.com/outline/outline',
    },
    /* tautulli */
    {
      matchPackageNames: ['/.*\\/tautulli$/'],
      sourceUrl: 'https://github.com/Tautulli/Tautulli',
    },
    /* overseerr */
    {
      matchPackageNames: ['/sctx\\/overseerr$/'],
      sourceUrl: 'https://github.com/sct/overseerr',
    },
    /* vscode */
    {
      matchPackageNames: ['/.*\\/code-server$/'],
      sourceUrl: 'https://github.com/coder/code-server',
    },
    /* nextcloud */
    {
      matchPackageNames: ['/nextcloud$/'],
      sourceUrl: 'https://github.com/nextcloud/server',
      changelogUrl: 'https://nextcloud.com/changelog/',
    },
    /* chadburn */
    {
      matchPackageNames: ['/.*\\/chadburn$/'],
      sourceUrl: 'https://github.com/PremoWeb/Chadburn',
    },
    /* grafana */
    {
      matchPackageNames: ['/.*\\/grafana$/'],
      sourceUrl: 'https://github.com/grafana/grafana',
    },
    /* mattermost */
    {
      matchPackageNames: ['/.*\\/mattermost-(team|enterprise)-edition$/'],
      sourceUrl: 'https://github.com/mattermost/mattermost-server',
      changelogUrl: 'https://docs.mattermost.com/about/mattermost-server-releases.html#latest-releases',
    },
    /* onlyoffice */
    {
      matchPackageNames: ['/onlyoffice\\/documentserver$/'],
      sourceUrl: 'https://github.com/ONLYOFFICE/DocumentServer',
    },
    /* eufy-security-ws */
    {
      matchPackageNames: ['/bropat\\/eufy-security-ws$/'],
      sourceUrl: 'https://github.com/bropat/eufy-security-ws',
    },
    /* changedetection.io */
    {
      matchPackageNames: ['/.*\\/changedetection.io$/'],
      versioning: 'regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.?(?<patch>\\d+)?\\.?(?<build>\\d+)?$',
      sourceUrl: 'https://github.com/dgtlmoon/changedetection.io',
    },
    /* watchtower */
    {
      matchPackageNames: ['/containrrr\\/watchtower$/'],
      sourceUrl: 'https://github.com/containrrr/watchtower',
    },
    /* cadvisor */
    {
      matchPackageNames: ['/.*\\/cadvisor$/'],
      sourceUrl: 'https://github.com/google/cadvisor',
    },
    /* psitransfer */
    {
      matchPackageNames: ['/psitrax\\/psitransfer$/'],
      sourceUrl: 'https://github.com/psi-4ward/psitransfer',
    },
    /* node_exporter */
    {
      matchPackageNames: ['/.*\\/node(-|_)exporter$/'],
      sourceUrl: 'https://github.com/prometheus/node_exporter',
    },
    /* blackbox_exporter */
    {
      matchPackageNames: ['/.*\\/blackbox(-|_)exporter$/'],
      sourceUrl: 'https://github.com/prometheus/blackbox_exporter',
    },
    /* privatebin */
    {
      matchPackageNames: ['/privatebin\\/.*$/'],
      sourceUrl: 'https://github.com/PrivateBin/PrivateBin',
    },
    /* actualbudget */
    {
      matchPackageNames: ['/.*\\/actual-server$/'],
      sourceUrl: 'https://github.com/actualbudget/actual',
      changelogUrl: 'https://actualbudget.org/docs/releases/',
    },
    /* borgmatic */
    {
      matchPackageNames: ['/.*\\/borgmatic$/'],
      sourceUrl: 'https://github.com/borgmatic-collective/borgmatic',
    },
    /* nginx */
    {
      matchPackageNames: ['/nginx$/'],
      changelogUrl: 'https://nginx.org/en/CHANGES',
    },
    /* alertmanager */
    {
      matchPackageNames: ['/.*\\/alertmanager$/'],
      sourceUrl: 'https://github.com/prometheus/alertmanager',
    },
    /* radarr */
    {
      matchPackageNames: ['/.*\\/radarr$/'],
      versionCompatibility: '^(?<compatibility>.*)-(?<version>.*)$',
      changelogUrl: 'https://github.com/Radarr/Radarr/releases/tag/v{{newVersion}}',
    },
    /* gotenberg */
    {
      matchPackageNames: ['/.*\\/gotenberg$/'],
      sourceUrl: 'https://github.com/gotenberg/gotenberg',
    },
    /* languagetool */
    {
      matchPackageNames: ['/.*\\/.*languagetool$/'],
      sourceUrl: 'https://github.com/silvio/docker-languagetool',
      changelogUrl: 'https://github.com/languagetool-org/languagetool/blob/master/languagetool-standalone/CHANGES.md',
    },
    /* scrutiny */
    {
      matchPackageNames: ['/.*\\/scrutiny$/'],
      versioning: 'regex:^v(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-omnibus$',
      sourceUrl: 'https://github.com/AnalogJ/scrutiny',
      changelogUrl: 'https://github.com/AnalogJ/scrutiny/releases',
    },
    /* drawio */
    {
      matchPackageNames: ['/.*\\/drawio$/'],
      sourceUrl: 'https://github.com/jgraph/drawio',
      changelogUrl: 'https://github.com/jgraph/drawio/blob/dev/ChangeLog',
      matchUpdateTypes: ['major'],
    },
    {
      matchPackageNames: ['/.*\\/drawio$/'],
      sourceUrl: 'https://github.com/jgraph/drawio',
      changelogUrl: 'https://github.com/jgraph/drawio/blob/dev/ChangeLog',
      matchUpdateTypes: ['minor', 'patch'],
      automerge: true,
      ignoreTests: true,
    },
    /* omada */
    {
      matchPackageNames: ['/mbentley\\/omada-controller$/'],
      changelogUrl: 'https://community.tp-link.com/en/business/forum/topic/245226',
    },
    /* guacamole */
    {
      groupName: 'Guacamole',
      matchPackageNames: [
        '/.*\\/guacamole$/',
        '/.*\\/guacd$/',
      ],
      changelogUrl: 'https://guacamole.apache.org/releases/{{newVersion}}',
    },
    /* nvidia dcgm-exporter */
    {
      matchPackageNames: ['/.*\\/dcgm-exporter$/'],
      versioning: 'loose',
      versionCompatibility: '^(?<version>.*)-(?<compatibility>.*)$',
      sourceUrl: 'https://github.com/NVIDIA/dcgm-exporter',
      prBodyNotes: '[GitHub Releases](https://github.com/NVIDIA/dcgm-exporter/releases)\n[DCGM Changelog](https://docs.nvidia.com/datacenter/dcgm/latest/release-notes/changelog.html)',
    },
    /* sonarr */
    {
      matchPackageNames: ['/.*\\/sonarr$/'],
      versionCompatibility: '^(?<compatibility>.*)-(?<version>.*)$',
      changelogUrl: 'https://services.sonarr.tv/v1/update/stable/changes?version=4',
    },
    /* esphome */
    {
      matchPackageNames: ['/.*\\/esphome$/'],
      sourceUrl: 'https://github.com/esphome/esphome',
    },
    /* browserless */
    {
      matchPackageNames: ['/browserless\\/chrom.*$/'],
      changelogUrl: 'https://github.com/browserless/chrome/blob/main/CHANGELOG.md',
    },
    /* apache tika */
    {
      matchPackageNames: ['/.*\\/tika$/'],
      prBodyNotes: '[Docker Image Changes](https://github.com/apache/tika-docker/blob/main/CHANGES.md)\n[Tika Changes](https://github.com/apache/tika/blob/main/CHANGES.txt)',
    },
    /* immich */
    {
      groupName: 'Immich',
      matchPackageNames: ['/.*\\/immich-.*$/'],
      sourceUrl: 'https://github.com/immich-app/immich',
    },
    /* wizarr */
    {
      matchPackageNames: ['/.*\\/wizarr$/'],
      sourceUrl: 'https://github.com/Wizarrrr/wizarr',
    },
    /* typesense */
    {
      matchPackageNames: ['/.*\\/typesense$/'],
      sourceUrl: 'https://github.com/typesense/typesense',
    },
    /* castsponsorskip */
    {
      matchPackageNames: ['/.*\\/castsponsorskip$/'],
      sourceUrl: 'https://github.com/gabe565/CastSponsorSkip',
    },
    /* notify_push */
    {
      matchPackageNames: ['/.*\\/notify_push$/'],
      sourceUrl: 'https://github.com/nextcloud/notify_push',
    },
    /* thanos */
    {
      matchPackageNames: ['/.*\\/thanos$/'],
      sourceUrl: 'https://github.com/thanos-io/thanos',
    },
    /* calibre */
    {
      matchPackageNames: ['/.*\\/calibre$/'],
      sourceUrl: 'https://github.com/kovidgoyal/calibre',
      changelogUrl: 'https://calibre-ebook.com/whats-new',
    },
    /* ubuntu */
    {
      matchPackageNames: ['/ubuntu$/'],
      versioning: 'ubuntu',
    },
    /* glances */
    {
      matchPackageNames: ['/.*\\/glances$/'],
      versioning: 'regex:^ubuntu-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)\\.?(?<build>\\d+)?-full$',
      changelogUrl: 'https://github.com/nicolargo/glances/releases',
    },
    /* mealie */
    {
      matchPackageNames: ['/.*\\/mealie$/'],
      sourceUrl: 'https://github.com/mealie-recipes/mealie',
    },
    /* audiobookshelf */
    {
      matchPackageNames: ['/.*\\/audiobookshelf$/'],
      sourceUrl: 'https://github.com/advplyr/audiobookshelf',
    },
    /* act_runner */
    {
      matchPackageNames: ['/.*\\/act_runner$/'],
      changelogUrl: 'https://gitea.com/gitea/act_runner/releases',
    },
    /* zigbee2mqtt */
    {
      matchPackageNames: ['/koenkk\\/zigbee2mqtt$/'],
      sourceUrl: 'https://github.com/Koenkk/zigbee2mqtt',
    },
    /* roundcubemail */
    {
      matchPackageNames: ['/roundcube\\/roundcubemail$/'],
      sourceUrl: 'https://github.com/roundcube/roundcubemail',
      versioning: 'regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-apache$',
    },
    /* dovecot */
    {
      matchPackageNames: ['/.*\\/dovecot.*$/'],
      sourceUrl: 'https://github.com/dovecot/core',
    },
    /* systemd_exporter */
    {
      matchPackageNames: ['/.*\\/systemd(-|_)exporter.*$/'],
      sourceUrl: 'https://github.com/prometheus-community/systemd_exporter',
    },
    /* nzbgetcom */
    {
      matchPackageNames: ['/.*\\/nzbget$/'],
      versioning: 'regex:^version-v(?<major>\\d+)\\.(?<minor>\\d+)$',
      sourceUrl: 'https://github.com/nzbgetcom/nzbget',
      changelogUrl: 'https://github.com/nzbgetcom/nzbget/blob/develop/ChangeLog.md',
    },
    /* librechat */
    {
      matchPackageNames: ['/.*\\/librechat$/'],
      sourceUrl: 'https://github.com/danny-avila/LibreChat',
    },
    /* emqx */
    {
      matchPackageNames: ['/.*\\/emqx$/'],
      sourceUrl: 'https://github.com/emqx/emqx',
      extractVersion: '^e?(?<version>.*)$',
    },
  ],

  prBodyTemplate: '{{{table}}}{{{notes}}}{{{changelogs}}}{{{controls}}}',
}
