{
  $schema: "https://docs.renovatebot.com/renovate-schema.json",

  dependencyDashboard: true,

  ansible: {
    fileMatch: ["^.*\\.ya?ml$"],
  },

  timezone: "Australia/Sydney",

  schedule: [
    "after 5pm and before 11:59pm every weekday",
    "after 9am and before 11:59pm every weekend",
  ],

  reviewers: ["calvinbui"],

  commitMessagePrefix: "{{depName}}:",
  commitMessageAction: "update",
  commitMessageTopic: "version",
  commitMessageExtra: "to {{#if isMajor}}{{{prettyNewMajor}}}{{else}}{{{prettyNewVersion}}}{{/if}}",

  /*
    Renovate will evaluate all packageRules and not stop once it gets a first match
    You should order your packageRules in order of importance so that later rules can override settings from earlier rules if needed.
  */
  packageRules: [
    /* Ignore latest and localhost tags */
    {
      matchDatasources: ["docker"],
      matchCurrentVersion: "/localhost|latest/",
      enabled: false,
    },
    /*
      override Docker datasource defaults
      https://docs.renovatebot.com/modules/datasource/#docker-datasource
    */
    {
      matchDatasources: ["docker"],
      commitMessageTopic: "version",
      digest: {
        commitMessageTopic: "digest",
        group: {
          commitMessageTopic: "digest",
        },
      },
      pin: {
        group: {
          commitMessageTopic: "version",
        },
      },
      group: {
        commitMessageTopic: "version",
      },
    },
    /* Plex */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/pms-docker"],
      versioning: "loose",
    },
    /* Umami */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/umami"],
      versioning: "regex:^postgresql-v(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$",
    },
    /* Borgmatic */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/borgmatic"],
      versioning: "regex:^base-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$",
    },
    /* Minio */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/minio"],
      versioning: "regex:^RELEASE\\.(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)T(?<build>.*)Z$",
      customChangelogUrl: "https://github.com/minio/minio",
    },
    /* Minio MC */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/mc"],
      versioning: "regex:^RELEASE\\.(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)T(?<build>.*)Z$",
      customChangelogUrl: "https://github.com/minio/mc",
    },
    /* Minio Console */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: ["minio\\/console"],
      customChangelogUrl: "https://github.com/minio/console",
    },
    /* NZBGet */
    // automerge patch version which linuxserver.io puts as the date of the build
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/nzbget$"],
      matchUpdateTypes: ["patch"],
      automerge: true,
      ignoreTests: true,
    },
    /* Bazarr */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/bazarr"],
      customChangelogUrl: "https://github.com/morpheus65535/bazarr",
    },
    /* VictoriaMetrics */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/victoria-metrics"],
      customChangelogUrl: "https://github.com/VictoriaMetrics/VictoriaMetrics",
    },
    /* vmalert */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/vmalert"],
      customChangelogUrl: "https://github.com/VictoriaMetrics/VictoriaMetrics",
    },
    /* Homer */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/homer"],
      customChangelogUrl: "https://github.com/bastienwirtz/homer",
    },
    /* Prowlarr */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/prowlarr"],
      versioning: "regex:^develop-version-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)\\.(?<build>\\d+)$",
      customChangelogUrl: "https://github.com/Prowlarr/Prowlarr",
    },
    /* Renovate */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/renovate"],
      customChangelogUrl: "https://github.com/renovatebot/renovate",
      matchUpdateTypes: ["patch"],
      automerge: true,
      ignoreTests: true,
    },
    /* Authelia */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/authelia"],
      customChangelogUrl: "https://github.com/authelia/authelia",
    },
    /* qBittorrent */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/qbittorrent"],
      customChangelogUrl: "https://github.com/qbittorrent/qBittorrent",
    },
    /* Portainer */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/portainer-[c|e]e"],
      customChangelogUrl: "https://github.com/portainer/portainer",
    },
    /* Outline */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: ["outlinewiki\\/outline"],
      customChangelogUrl: "https://github.com/outline/outline",
    },
    /* Tautulli */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/tautulli"],
      customChangelogUrl: "https://github.com/Tautulli/Tautulli",
    },
    /* Overseerr */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: ["sctx\\/overseerr"],
      customChangelogUrl: "https://github.com/sct/overseerr",
    },
    /* VS Code Server */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/code-server"],
      customChangelogUrl: "https://github.com/coder/code-server",
    },
    /* LibreTranslate */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/libretranslate"],
      customChangelogUrl: "https://github.com/LibreTranslate/LibreTranslate",
    },
    /* Nextcloud */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: ["nextcloud"],
      customChangelogUrl: "https://github.com/nextcloud/server",
    },
    /* Chadburn */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/chadburn"],
      customChangelogUrl: "https://github.com/PremoWeb/Chadburn",
    },
    /* Grafana */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/grafana"],
      customChangelogUrl: "https://github.com/grafana/grafana",
    },
    /* Mattermost */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/mattermost-(team|enterprise)-edition"],
      customChangelogUrl: "https://github.com/mattermost/mattermost-server",
    },
    /* OnlyOffice */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: ["onlyoffice\\/documentserver"],
      customChangelogUrl: "https://github.com/ONLYOFFICE/DocumentServer",
    },
    /* eufy-security-ws */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: ["bropat\\/eufy-security-ws"],
      customChangelogUrl: "https://github.com/bropat/eufy-security-ws",
    },
    /* eufy rtsp */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: ["aler9\\/rtsp-simple-server"],
      customChangelogUrl: "https://github.com/aler9/rtsp-simple-server",
    },
    /* changedetection.io */
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: [".*\\/changedetection.io"],
      versioning: "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)\\.?(?<build>\\d+)?$",
      customChangelogUrl: "https://github.com/dgtlmoon/changedetection.io",
    },
  ],

  prBodyTemplate: "{{{table}}}{{{notes}}}{{{changelogs}}}{{{controls}}}",
}
